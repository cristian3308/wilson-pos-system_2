"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/lib/localDatabase.ts":
/*!**********************************!*\
  !*** ./src/lib/localDatabase.ts ***!
  \**********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getLocalDB: function() { return /* binding */ getLocalDB; },\n/* harmony export */   localDB: function() { return /* binding */ localDB; }\n/* harmony export */ });\n/* harmony import */ var idb__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! idb */ \"(app-pages-browser)/./node_modules/idb/build/index.js\");\n// Sistema de base de datos local: Solo IndexedDB (sin Firebase)\n\n// Clase principal para manejo de base de datos local\nclass LocalDatabase {\n    // Inicializar IndexedDB\n    async init() {\n        if (this.isInitialized) return;\n        try {\n            this.db = await (0,idb__WEBPACK_IMPORTED_MODULE_0__.openDB)(this.dbName, this.version, {\n                upgrade (db) {\n                    // Store para vehículos\n                    if (!db.objectStoreNames.contains(\"vehicles\")) {\n                        const vehicleStore = db.createObjectStore(\"vehicles\", {\n                            keyPath: \"id\"\n                        });\n                        vehicleStore.createIndex(\"placa\", \"placa\", {\n                            unique: false\n                        });\n                    }\n                    // Store para tickets de parqueadero\n                    if (!db.objectStoreNames.contains(\"parking_tickets\")) {\n                        const parkingStore = db.createObjectStore(\"parking_tickets\", {\n                            keyPath: \"id\"\n                        });\n                        parkingStore.createIndex(\"placa\", \"placa\", {\n                            unique: false\n                        });\n                        parkingStore.createIndex(\"status\", \"status\", {\n                            unique: false\n                        });\n                        parkingStore.createIndex(\"entryTime\", \"entryTime\", {\n                            unique: false\n                        });\n                    }\n                    // Store para trabajadores\n                    if (!db.objectStoreNames.contains(\"workers\")) {\n                        const workerStore = db.createObjectStore(\"workers\", {\n                            keyPath: \"id\"\n                        });\n                        workerStore.createIndex(\"name\", \"name\", {\n                            unique: false\n                        });\n                        workerStore.createIndex(\"isActive\", \"isActive\", {\n                            unique: false\n                        });\n                    }\n                    // Store para servicios de lavadero\n                    if (!db.objectStoreNames.contains(\"carwash_services\")) {\n                        const serviceStore = db.createObjectStore(\"carwash_services\", {\n                            keyPath: \"id\"\n                        });\n                        serviceStore.createIndex(\"vehicleType\", \"vehicleType\", {\n                            unique: false\n                        });\n                        serviceStore.createIndex(\"isActive\", \"isActive\", {\n                            unique: false\n                        });\n                    }\n                    // Store para transacciones de lavadero\n                    if (!db.objectStoreNames.contains(\"carwash_transactions\")) {\n                        const transactionStore = db.createObjectStore(\"carwash_transactions\", {\n                            keyPath: \"id\"\n                        });\n                        transactionStore.createIndex(\"placa\", \"placa\", {\n                            unique: false\n                        });\n                        transactionStore.createIndex(\"status\", \"status\", {\n                            unique: false\n                        });\n                        transactionStore.createIndex(\"workerId\", \"workerId\", {\n                            unique: false\n                        });\n                        transactionStore.createIndex(\"createdAt\", \"createdAt\", {\n                            unique: false\n                        });\n                    }\n                    // Store para configuración del negocio\n                    if (!db.objectStoreNames.contains(\"business_config\")) {\n                        db.createObjectStore(\"business_config\", {\n                            keyPath: \"id\"\n                        });\n                    }\n                    // Store para historial de vehículos (reportes)\n                    if (!db.objectStoreNames.contains(\"vehicle_history\")) {\n                        const historyStore = db.createObjectStore(\"vehicle_history\", {\n                            keyPath: \"id\"\n                        });\n                        historyStore.createIndex(\"placa\", \"placa\", {\n                            unique: false\n                        });\n                        historyStore.createIndex(\"fecha\", \"fecha\", {\n                            unique: false\n                        });\n                        historyStore.createIndex(\"tipo\", \"tipo\", {\n                            unique: false\n                        });\n                    }\n                }\n            });\n            this.isInitialized = true;\n            console.log(\"✅ LocalDatabase inicializada correctamente\");\n        } catch (error) {\n            console.error(\"❌ Error inicializando LocalDatabase:\", error);\n            throw error;\n        }\n    }\n    // === MÉTODOS PARA VEHÍCULOS ===\n    async saveVehicle(vehicle) {\n        await this.init();\n        await this.db.put(\"vehicles\", vehicle);\n        console.log(\"✅ Veh\\xedculo guardado localmente: \".concat(vehicle.placa));\n    }\n    async getVehicle(vehicleId) {\n        await this.init();\n        return await this.db.get(\"vehicles\", vehicleId) || null;\n    }\n    async getAllVehicles() {\n        await this.init();\n        return await this.db.getAll(\"vehicles\");\n    }\n    async updateVehicle(vehicle) {\n        await this.init();\n        vehicle.updatedAt = new Date();\n        await this.db.put(\"vehicles\", vehicle);\n        console.log(\"✅ Veh\\xedculo actualizado localmente: \".concat(vehicle.placa));\n    }\n    async deleteVehicle(vehicleId) {\n        await this.init();\n        await this.db.delete(\"vehicles\", vehicleId);\n        console.log(\"✅ Veh\\xedculo eliminado localmente: \".concat(vehicleId));\n    }\n    // === MÉTODOS PARA TICKETS DE PARQUEADERO ===\n    async saveParkingTicket(ticket) {\n        await this.init();\n        await this.db.put(\"parking_tickets\", ticket);\n        console.log(\"✅ Ticket de parqueadero guardado localmente: \".concat(ticket.placa));\n    }\n    async getParkingTicket(ticketId) {\n        await this.init();\n        return await this.db.get(\"parking_tickets\", ticketId) || null;\n    }\n    async getParkingTickets(status) {\n        await this.init();\n        if (status) {\n            const tx = this.db.transaction(\"parking_tickets\", \"readonly\");\n            const index = tx.store.index(\"status\");\n            return await index.getAll(status);\n        }\n        return await this.db.getAll(\"parking_tickets\");\n    }\n    async updateParkingTicket(ticket) {\n        await this.init();\n        ticket.updatedAt = new Date();\n        await this.db.put(\"parking_tickets\", ticket);\n        console.log(\"✅ Ticket de parqueadero actualizado localmente: \".concat(ticket.placa));\n    }\n    async completeParkingTicket(ticketId, exitTime) {\n        await this.init();\n        const ticket = await this.getParkingTicket(ticketId);\n        if (!ticket) {\n            throw new Error(\"Ticket no encontrado: \".concat(ticketId));\n        }\n        const exit = exitTime || new Date();\n        const entry = new Date(ticket.entryTime);\n        const totalMinutes = Math.max(1, Math.floor((exit.getTime() - entry.getTime()) / (1000 * 60)));\n        // Calcular el monto total basado en el precio base y tiempo\n        // Si ya tiene totalAmount, usarlo, sino calcular\n        const totalAmount = ticket.totalAmount || ticket.basePrice;\n        const updatedTicket = {\n            ...ticket,\n            exitTime: exit,\n            totalMinutes,\n            totalAmount,\n            status: \"completed\",\n            isPaid: true,\n            updatedAt: new Date()\n        };\n        await this.updateParkingTicket(updatedTicket);\n        console.log(\"✅ Ticket completado localmente: \".concat(ticket.placa, \" - $\").concat(totalAmount));\n        return updatedTicket;\n    }\n    async deleteParkingTicket(ticketId) {\n        await this.init();\n        await this.db.delete(\"parking_tickets\", ticketId);\n        console.log(\"✅ Ticket eliminado localmente: \".concat(ticketId));\n    }\n    // === MÉTODOS PARA TRABAJADORES ===\n    async saveWorker(worker) {\n        await this.init();\n        await this.db.put(\"workers\", worker);\n        console.log(\"✅ Trabajador guardado localmente: \".concat(worker.name));\n    }\n    async getWorker(workerId) {\n        await this.init();\n        return await this.db.get(\"workers\", workerId) || null;\n    }\n    async getAllWorkers() {\n        let activeOnly = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;\n        await this.init();\n        const allWorkers = await this.db.getAll(\"workers\");\n        if (activeOnly) {\n            return allWorkers.filter((worker)=>worker.isActive);\n        }\n        return allWorkers;\n    }\n    async updateWorker(worker) {\n        await this.init();\n        worker.updatedAt = new Date();\n        await this.db.put(\"workers\", worker);\n        console.log(\"✅ Trabajador actualizado localmente: \".concat(worker.name));\n    }\n    async deleteWorker(workerId) {\n        await this.init();\n        await this.db.delete(\"workers\", workerId);\n        console.log(\"✅ Trabajador eliminado localmente: \".concat(workerId));\n    }\n    // === MÉTODOS PARA SERVICIOS DE LAVADERO ===\n    async saveCarwashService(service) {\n        await this.init();\n        await this.db.put(\"carwash_services\", service);\n        console.log(\"✅ Servicio de lavadero guardado localmente: \".concat(service.serviceName));\n    }\n    async getCarwashService(serviceId) {\n        await this.init();\n        return await this.db.get(\"carwash_services\", serviceId) || null;\n    }\n    async getAllCarwashServices() {\n        let activeOnly = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;\n        await this.init();\n        const allServices = await this.db.getAll(\"carwash_services\");\n        if (activeOnly) {\n            return allServices.filter((service)=>service.isActive);\n        }\n        return allServices;\n    }\n    async updateCarwashService(service) {\n        await this.init();\n        service.updatedAt = new Date();\n        await this.db.put(\"carwash_services\", service);\n        console.log(\"✅ Servicio de lavadero actualizado localmente: \".concat(service.serviceName));\n    }\n    async deleteCarwashService(serviceId) {\n        await this.init();\n        await this.db.delete(\"carwash_services\", serviceId);\n        console.log(\"✅ Servicio eliminado localmente: \".concat(serviceId));\n    }\n    // === MÉTODOS PARA TRANSACCIONES DE LAVADERO ===\n    async saveCarwashTransaction(transaction) {\n        await this.init();\n        await this.db.put(\"carwash_transactions\", transaction);\n        console.log(\"✅ Transacci\\xf3n de lavadero guardada localmente: \".concat(transaction.placa));\n    }\n    async getCarwashTransaction(transactionId) {\n        await this.init();\n        return await this.db.get(\"carwash_transactions\", transactionId) || null;\n    }\n    async getAllCarwashTransactions(status) {\n        await this.init();\n        if (status) {\n            const tx = this.db.transaction(\"carwash_transactions\", \"readonly\");\n            const index = tx.store.index(\"status\");\n            return await index.getAll(status);\n        }\n        return await this.db.getAll(\"carwash_transactions\");\n    }\n    async updateCarwashTransaction(transaction) {\n        await this.init();\n        transaction.updatedAt = new Date();\n        await this.db.put(\"carwash_transactions\", transaction);\n        console.log(\"✅ Transacci\\xf3n actualizada localmente: \".concat(transaction.placa));\n    }\n    async deleteCarwashTransaction(transactionId) {\n        await this.init();\n        await this.db.delete(\"carwash_transactions\", transactionId);\n        console.log(\"✅ Transacci\\xf3n eliminada localmente: \".concat(transactionId));\n    }\n    // === MÉTODOS PARA CONFIGURACIÓN DEL NEGOCIO ===\n    async saveBusinessConfig(config) {\n        await this.init();\n        await this.db.put(\"business_config\", config);\n        console.log(\"✅ Configuraci\\xf3n guardada localmente: \".concat(config.businessName));\n    }\n    async getBusinessConfig() {\n        await this.init();\n        const configs = await this.db.getAll(\"business_config\");\n        return configs.length > 0 ? configs[0] : null;\n    }\n    // === MÉTODOS PARA HISTORIAL (REPORTES) ===\n    async saveParkingRecord(record) {\n        await this.init();\n        await this.db.put(\"vehicle_history\", record);\n        console.log(\"✅ Registro de historial guardado localmente: \".concat(record.placa));\n    }\n    async getParkingHistory() {\n        await this.init();\n        return await this.db.getAll(\"vehicle_history\");\n    }\n    // === MÉTODOS DE UTILIDAD ===\n    async clearAllData() {\n        await this.init();\n        const stores = [\n            \"vehicles\",\n            \"parking_tickets\",\n            \"workers\",\n            \"carwash_services\",\n            \"carwash_transactions\",\n            \"business_config\",\n            \"vehicle_history\"\n        ];\n        for (const storeName of stores){\n            await this.db.clear(storeName);\n        }\n        console.log(\"✅ Todos los datos locales han sido eliminados\");\n    }\n    async exportData() {\n        await this.init();\n        const data = {\n            vehicles: await this.db.getAll(\"vehicles\"),\n            parkingTickets: await this.db.getAll(\"parking_tickets\"),\n            workers: await this.db.getAll(\"workers\"),\n            carwashServices: await this.db.getAll(\"carwash_services\"),\n            carwashTransactions: await this.db.getAll(\"carwash_transactions\"),\n            businessConfig: await this.db.getAll(\"business_config\"),\n            vehicleHistory: await this.db.getAll(\"vehicle_history\"),\n            exportDate: new Date().toISOString()\n        };\n        console.log(\"✅ Datos exportados correctamente\");\n        return data;\n    }\n    async importData(data) {\n        await this.init();\n        try {\n            // Limpiar datos existentes\n            await this.clearAllData();\n            // Importar cada tipo de dato\n            if (data.vehicles) {\n                for (const item of data.vehicles){\n                    await this.db.put(\"vehicles\", item);\n                }\n            }\n            if (data.parkingTickets) {\n                for (const item of data.parkingTickets){\n                    await this.db.put(\"parking_tickets\", item);\n                }\n            }\n            if (data.workers) {\n                for (const item of data.workers){\n                    await this.db.put(\"workers\", item);\n                }\n            }\n            if (data.carwashServices) {\n                for (const item of data.carwashServices){\n                    await this.db.put(\"carwash_services\", item);\n                }\n            }\n            if (data.carwashTransactions) {\n                for (const item of data.carwashTransactions){\n                    await this.db.put(\"carwash_transactions\", item);\n                }\n            }\n            if (data.businessConfig) {\n                for (const item of data.businessConfig){\n                    await this.db.put(\"business_config\", item);\n                }\n            }\n            if (data.vehicleHistory) {\n                for (const item of data.vehicleHistory){\n                    await this.db.put(\"vehicle_history\", item);\n                }\n            }\n            console.log(\"✅ Datos importados correctamente\");\n        } catch (error) {\n            console.error(\"❌ Error importando datos:\", error);\n            throw error;\n        }\n    }\n    // === MÉTODOS PARA TIPOS DE VEHÍCULOS ===\n    async saveVehicleType(vehicleType) {\n        await this.init();\n        // Obtener configuración actual o crear una por defecto\n        let config = await this.getBusinessConfig();\n        if (!config) {\n            console.log(\"⚠️ No existe configuraci\\xf3n, creando una por defecto...\");\n            config = {\n                businessName: \"Wilson Cars & Wash\",\n                nit: \"000000000-0\",\n                address: \"\",\n                phone: \"\",\n                email: \"\",\n                vehicleTypes: [],\n                ticketData: {\n                    companyName: \"Wilson Cars & Wash\",\n                    companySubtitle: \"Parqueadero y Lavadero\",\n                    nit: \"000000000-0\"\n                },\n                createdAt: new Date(),\n                updatedAt: new Date()\n            };\n            await this.saveBusinessConfig(config);\n        }\n        // Verificar que no exista un tipo con el mismo nombre\n        const existingTypes = config.vehicleTypes || [];\n        const isDuplicate = existingTypes.some((type)=>type.name.toLowerCase() === vehicleType.name.toLowerCase());\n        if (isDuplicate) {\n            throw new Error(\"Ya existe un tipo de veh\\xedculo con este nombre\");\n        }\n        // Agregar el nuevo tipo\n        const updatedConfig = {\n            ...config,\n            vehicleTypes: [\n                ...existingTypes,\n                vehicleType\n            ],\n            updatedAt: new Date()\n        };\n        await this.saveBusinessConfig(updatedConfig);\n        console.log(\"✅ Tipo de veh\\xedculo guardado: \".concat(vehicleType.name));\n    }\n    async getVehicleTypes() {\n        await this.init();\n        const config = await this.getBusinessConfig();\n        return (config === null || config === void 0 ? void 0 : config.vehicleTypes) || [];\n    }\n    async updateVehicleType(vehicleTypeId, updates) {\n        await this.init();\n        const config = await this.getBusinessConfig();\n        if (!config) {\n            throw new Error(\"No se encontr\\xf3 configuraci\\xf3n del negocio\");\n        }\n        const vehicleTypes = config.vehicleTypes || [];\n        const typeIndex = vehicleTypes.findIndex((type)=>type.id === vehicleTypeId);\n        if (typeIndex === -1) {\n            throw new Error(\"Tipo de veh\\xedculo no encontrado\");\n        }\n        // Actualizar el tipo\n        vehicleTypes[typeIndex] = {\n            ...vehicleTypes[typeIndex],\n            ...updates,\n            updatedAt: new Date()\n        };\n        const updatedConfig = {\n            ...config,\n            vehicleTypes,\n            updatedAt: new Date()\n        };\n        await this.saveBusinessConfig(updatedConfig);\n        console.log(\"✅ Tipo de veh\\xedculo actualizado: \".concat(vehicleTypeId));\n    }\n    async deleteVehicleType(vehicleTypeId) {\n        await this.init();\n        const config = await this.getBusinessConfig();\n        if (!config) {\n            throw new Error(\"No se encontr\\xf3 configuraci\\xf3n del negocio\");\n        }\n        const vehicleTypes = config.vehicleTypes || [];\n        const typeToDelete = vehicleTypes.find((type)=>type.id === vehicleTypeId);\n        if (!typeToDelete) {\n            throw new Error(\"Tipo de veh\\xedculo no encontrado\");\n        }\n        // No permitir eliminar tipos predeterminados\n        if (!typeToDelete.isCustom) {\n            throw new Error(\"No se pueden eliminar tipos de veh\\xedculo predeterminados\");\n        }\n        // Filtrar el tipo a eliminar\n        const updatedVehicleTypes = vehicleTypes.filter((type)=>type.id !== vehicleTypeId);\n        const updatedConfig = {\n            ...config,\n            vehicleTypes: updatedVehicleTypes,\n            updatedAt: new Date()\n        };\n        await this.saveBusinessConfig(updatedConfig);\n        console.log(\"✅ Tipo de veh\\xedculo eliminado: \".concat(typeToDelete.name));\n    }\n    constructor(){\n        this.isInitialized = false;\n        this.dbName = \"POSLocalDatabase\";\n        this.version = 1;\n    }\n}\n// Instancia singleton\nconst localDatabase = new LocalDatabase();\n// Función helper para obtener la instancia\nfunction getLocalDB() {\n    return localDatabase;\n}\n// Exportar instancia por defecto\nconst localDB = localDatabase;\n/* harmony default export */ __webpack_exports__[\"default\"] = (localDatabase);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9saWIvbG9jYWxEYXRhYmFzZS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxnRUFBZ0U7QUFDckI7QUFnSDNDLHFEQUFxRDtBQUNyRCxNQUFNQztJQU1KLHdCQUF3QjtJQUN4QixNQUFNQyxPQUFzQjtRQUMxQixJQUFJLElBQUksQ0FBQ0MsYUFBYSxFQUFFO1FBRXhCLElBQUk7WUFDRixJQUFJLENBQUNDLEVBQUUsR0FBRyxNQUFNSiwyQ0FBTUEsQ0FBQyxJQUFJLENBQUNLLE1BQU0sRUFBRSxJQUFJLENBQUNDLE9BQU8sRUFBRTtnQkFDaERDLFNBQVFILEVBQUU7b0JBQ1IsdUJBQXVCO29CQUN2QixJQUFJLENBQUNBLEdBQUdJLGdCQUFnQixDQUFDQyxRQUFRLENBQUMsYUFBYTt3QkFDN0MsTUFBTUMsZUFBZU4sR0FBR08saUJBQWlCLENBQUMsWUFBWTs0QkFBRUMsU0FBUzt3QkFBSzt3QkFDdEVGLGFBQWFHLFdBQVcsQ0FBQyxTQUFTLFNBQVM7NEJBQUVDLFFBQVE7d0JBQU07b0JBQzdEO29CQUVBLG9DQUFvQztvQkFDcEMsSUFBSSxDQUFDVixHQUFHSSxnQkFBZ0IsQ0FBQ0MsUUFBUSxDQUFDLG9CQUFvQjt3QkFDcEQsTUFBTU0sZUFBZVgsR0FBR08saUJBQWlCLENBQUMsbUJBQW1COzRCQUFFQyxTQUFTO3dCQUFLO3dCQUM3RUcsYUFBYUYsV0FBVyxDQUFDLFNBQVMsU0FBUzs0QkFBRUMsUUFBUTt3QkFBTTt3QkFDM0RDLGFBQWFGLFdBQVcsQ0FBQyxVQUFVLFVBQVU7NEJBQUVDLFFBQVE7d0JBQU07d0JBQzdEQyxhQUFhRixXQUFXLENBQUMsYUFBYSxhQUFhOzRCQUFFQyxRQUFRO3dCQUFNO29CQUNyRTtvQkFFQSwwQkFBMEI7b0JBQzFCLElBQUksQ0FBQ1YsR0FBR0ksZ0JBQWdCLENBQUNDLFFBQVEsQ0FBQyxZQUFZO3dCQUM1QyxNQUFNTyxjQUFjWixHQUFHTyxpQkFBaUIsQ0FBQyxXQUFXOzRCQUFFQyxT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QUFHekMsTUFBTTtZQUNUK0IsY0FBY3NCO1lBQ2RoSCxXQUFXLElBQUlDO1FBQ2pCO1FBRUEsTUFBTSxJQUFJLENBQUN5RCxrQkFBa0IsQ0FBQzBDO1FBQzlCakgsUUFBUUMsR0FBRyxDQUFDLG9DQUFtRCxPQUFsQnlILGFBQWE1RSxJQUFJO0lBQ2hFOzthQXRnQlEvRCxnQkFBZ0I7YUFDaEJFLFNBQVM7YUFDVEMsVUFBVTs7QUFxZ0JwQjtBQUVBLHNCQUFzQjtBQUN0QixNQUFNNEksZ0JBQWdCLElBQUlqSjtBQUUxQiwyQ0FBMkM7QUFDcEMsU0FBU2tKO0lBQ2QsT0FBT0Q7QUFDVDtBQUVBLGlDQUFpQztBQUMxQixNQUFNRSxVQUFVRixjQUFjO0FBQ3JDLCtEQUFlQSxhQUFhQSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3NyYy9saWIvbG9jYWxEYXRhYmFzZS50cz80YWYyIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFNpc3RlbWEgZGUgYmFzZSBkZSBkYXRvcyBsb2NhbDogU29sbyBJbmRleGVkREIgKHNpbiBGaXJlYmFzZSlcclxuaW1wb3J0IHsgb3BlbkRCLCBJREJQRGF0YWJhc2UgfSBmcm9tICdpZGInO1xyXG5pbXBvcnQgeyBzYWZlRGF0ZSwgc2FmZUdldFRpbWUsIHNhZmVEYXRlRGlmZiwgaXNWYWxpZERhdGUgfSBmcm9tICcuLi91dGlscy9kYXRlVXRpbHMnO1xyXG5cclxuLy8gVGlwb3MgZGUgZGF0b3NcclxuZXhwb3J0IGludGVyZmFjZSBXb3JrZXIge1xyXG4gIGlkOiBzdHJpbmc7XHJcbiAgbmFtZTogc3RyaW5nO1xyXG4gIHBob25lOiBzdHJpbmc7XHJcbiAgZW1haWw/OiBzdHJpbmc7XHJcbiAgcGVyY2VudGFnZTogbnVtYmVyOyAvLyBQb3JjZW50YWplIHF1ZSBzZSBsbGV2YSBkZWwgc2VydmljaW9cclxuICBpc0FjdGl2ZTogYm9vbGVhbjtcclxuICBjcmVhdGVkQXQ6IERhdGU7XHJcbiAgdXBkYXRlZEF0OiBEYXRlO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIENhcndhc2hTZXJ2aWNlIHtcclxuICBpZDogc3RyaW5nO1xyXG4gIHZlaGljbGVUeXBlOiBzdHJpbmc7XHJcbiAgc2VydmljZU5hbWU6IHN0cmluZztcclxuICBiYXNlUHJpY2U6IG51bWJlcjtcclxuICBlc3RpbWF0ZWRUaW1lOiBudW1iZXI7IC8vIGVuIG1pbnV0b3NcclxuICBpc0FjdGl2ZTogYm9vbGVhbjtcclxuICBjcmVhdGVkQXQ6IERhdGU7XHJcbiAgdXBkYXRlZEF0OiBEYXRlO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIENhcndhc2hUcmFuc2FjdGlvbiB7XHJcbiAgaWQ6IHN0cmluZztcclxuICB0aWNrZXRJZDogc3RyaW5nO1xyXG4gIHBsYWNhOiBzdHJpbmc7XHJcbiAgdmVoaWNsZVR5cGU6IHN0cmluZztcclxuICBzZXJ2aWNlTmFtZTogc3RyaW5nO1xyXG4gIGJhc2VQcmljZTogbnVtYmVyO1xyXG4gIHdvcmtlcklkOiBzdHJpbmc7XHJcbiAgd29ya2VyTmFtZTogc3RyaW5nO1xyXG4gIHdvcmtlclBlcmNlbnRhZ2U6IG51bWJlcjtcclxuICB3b3JrZXJDb21taXNzaW9uOiBudW1iZXI7XHJcbiAgY29tcGFueUVhcm5pbmc6IG51bWJlcjtcclxuICBzdGF0dXM6ICdwZW5kaW5nJyB8ICdpbl9wcm9ncmVzcycgfCAnY29tcGxldGVkJyB8ICdjYW5jZWxsZWQnO1xyXG4gIHN0YXJ0VGltZTogRGF0ZTtcclxuICBlbmRUaW1lPzogRGF0ZTtcclxuICBjcmVhdGVkQXQ6IERhdGU7XHJcbiAgdXBkYXRlZEF0OiBEYXRlO1xyXG59XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFZlaGljbGUge1xyXG4gIGlkOiBzdHJpbmc7XHJcbiAgcGxhY2E6IHN0cmluZztcclxuICB0aXBvOiAnY2FyJyB8ICdtb3RvcmN5Y2xlJyB8ICd0cnVjayc7XHJcbiAgY29sb3I/OiBzdHJpbmc7XHJcbiAgbW9kZWxvPzogc3RyaW5nO1xyXG4gIHByb3BpZXRhcmlvPzogc3RyaW5nO1xyXG4gIHRlbGVmb25vPzogc3RyaW5nO1xyXG4gIGNyZWF0ZWRBdDogRGF0ZTtcclxuICB1cGRhdGVkQXQ6IERhdGU7XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgUGFya2luZ1RpY2tldCB7XHJcbiAgaWQ6IHN0cmluZztcclxuICB2ZWhpY2xlSWQ6IHN0cmluZztcclxuICBwbGFjYTogc3RyaW5nO1xyXG4gIHZlaGljbGVUeXBlOiBzdHJpbmc7IC8vIOKchSBBaG9yYSBhY2VwdGEgY3VhbHF1aWVyIHN0cmluZyAodGlwb3MgcHJlZGV0ZXJtaW5hZG9zIG8gSURzIHBlcnNvbmFsaXphZG9zKVxyXG4gIGVudHJ5VGltZTogRGF0ZTtcclxuICBleGl0VGltZT86IERhdGU7XHJcbiAgdG90YWxNaW51dGVzPzogbnVtYmVyO1xyXG4gIGJhc2VQcmljZTogbnVtYmVyO1xyXG4gIHRvdGFsQW1vdW50PzogbnVtYmVyO1xyXG4gIGJhcmNvZGU/OiBzdHJpbmc7IC8vIEPDs2RpZ28gZGUgYmFycmFzIGRlbCB0aWNrZXRcclxuICBpc1BhaWQ6IGJvb2xlYW47XHJcbiAgc3RhdHVzOiAnYWN0aXZlJyB8ICdjb21wbGV0ZWQnIHwgJ2NhbmNlbGxlZCc7XHJcbiAgY3JlYXRlZEF0OiBEYXRlO1xyXG4gIHVwZGF0ZWRBdDogRGF0ZTtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBWZWhpY2xlVHlwZUNvbmZpZyB7XHJcbiAgaWQ6IHN0cmluZztcclxuICBuYW1lOiBzdHJpbmc7XHJcbiAgaWNvbk5hbWU6IHN0cmluZztcclxuICB0YXJpZmE6IG51bWJlcjtcclxuICBpc0N1c3RvbTogYm9vbGVhbjtcclxuICBjcmVhdGVkQXQ6IERhdGU7XHJcbiAgdXBkYXRlZEF0PzogRGF0ZTtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBCdXNpbmVzc0NvbmZpZyB7XHJcbiAgaWQ6IHN0cmluZztcclxuICBidXNpbmVzc05hbWU6IHN0cmluZztcclxuICBidXNpbmVzc0FkZHJlc3M6IHN0cmluZztcclxuICBidXNpbmVzc1Bob25lOiBzdHJpbmc7XHJcbiAgY2FyUGFya2luZ1JhdGU6IG51bWJlcjtcclxuICBtb3RvcmN5Y2xlUGFya2luZ1JhdGU6IG51bWJlcjtcclxuICB0cnVja1BhcmtpbmdSYXRlOiBudW1iZXI7XHJcbiAgY2Fyd2FzaEVuYWJsZWQ6IGJvb2xlYW47XHJcbiAgcGFya2luZ0VuYWJsZWQ6IGJvb2xlYW47XHJcbiAgLy8gTnVldm9zIGNhbXBvcyBwYXJhIHRpcG9zIGRlIHZlaMOtY3Vsb3MgZGluw6FtaWNvc1xyXG4gIHZlaGljbGVUeXBlczogVmVoaWNsZVR5cGVDb25maWdbXTtcclxuICAvLyBOdWV2b3MgY2FtcG9zIHBhcmEgY29uZmlndXJhY2nDs24gZGUgdGlja2V0c1xyXG4gIHRpY2tldERhdGE6IHtcclxuICAgIGNvbXBhbnlOYW1lOiBzdHJpbmc7XHJcbiAgICBjb21wYW55U3VidGl0bGU6IHN0cmluZztcclxuICAgIG5pdDogc3RyaW5nO1xyXG4gICAgYWRkcmVzczogc3RyaW5nO1xyXG4gICAgcGhvbmU6IHN0cmluZztcclxuICAgIGVtYWlsOiBzdHJpbmc7XHJcbiAgICB3ZWJzaXRlOiBzdHJpbmc7XHJcbiAgICBmb290ZXJNZXNzYWdlOiBzdHJpbmc7XHJcbiAgICBmb290ZXJJbmZvOiBzdHJpbmc7XHJcbiAgfTtcclxuICBjcmVhdGVkQXQ6IERhdGU7XHJcbiAgdXBkYXRlZEF0OiBEYXRlO1xyXG59XHJcblxyXG4vLyBDbGFzZSBwcmluY2lwYWwgcGFyYSBtYW5lam8gZGUgYmFzZSBkZSBkYXRvcyBsb2NhbFxyXG5jbGFzcyBMb2NhbERhdGFiYXNlIHtcclxuICBwcml2YXRlIGRiITogSURCUERhdGFiYXNlO1xyXG4gIHByaXZhdGUgaXNJbml0aWFsaXplZCA9IGZhbHNlO1xyXG4gIHByaXZhdGUgZGJOYW1lID0gJ1BPU0xvY2FsRGF0YWJhc2UnO1xyXG4gIHByaXZhdGUgdmVyc2lvbiA9IDE7XHJcblxyXG4gIC8vIEluaWNpYWxpemFyIEluZGV4ZWREQlxyXG4gIGFzeW5jIGluaXQoKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICBpZiAodGhpcy5pc0luaXRpYWxpemVkKSByZXR1cm47XHJcblxyXG4gICAgdHJ5IHtcclxuICAgICAgdGhpcy5kYiA9IGF3YWl0IG9wZW5EQih0aGlzLmRiTmFtZSwgdGhpcy52ZXJzaW9uLCB7XHJcbiAgICAgICAgdXBncmFkZShkYikge1xyXG4gICAgICAgICAgLy8gU3RvcmUgcGFyYSB2ZWjDrWN1bG9zXHJcbiAgICAgICAgICBpZiAoIWRiLm9iamVjdFN0b3JlTmFtZXMuY29udGFpbnMoJ3ZlaGljbGVzJykpIHtcclxuICAgICAgICAgICAgY29uc3QgdmVoaWNsZVN0b3JlID0gZGIuY3JlYXRlT2JqZWN0U3RvcmUoJ3ZlaGljbGVzJywgeyBrZXlQYXRoOiAnaWQnIH0pO1xyXG4gICAgICAgICAgICB2ZWhpY2xlU3RvcmUuY3JlYXRlSW5kZXgoJ3BsYWNhJywgJ3BsYWNhJywgeyB1bmlxdWU6IGZhbHNlIH0pO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIC8vIFN0b3JlIHBhcmEgdGlja2V0cyBkZSBwYXJxdWVhZGVyb1xyXG4gICAgICAgICAgaWYgKCFkYi5vYmplY3RTdG9yZU5hbWVzLmNvbnRhaW5zKCdwYXJraW5nX3RpY2tldHMnKSkge1xyXG4gICAgICAgICAgICBjb25zdCBwYXJraW5nU3RvcmUgPSBkYi5jcmVhdGVPYmplY3RTdG9yZSgncGFya2luZ190aWNrZXRzJywgeyBrZXlQYXRoOiAnaWQnIH0pO1xyXG4gICAgICAgICAgICBwYXJraW5nU3RvcmUuY3JlYXRlSW5kZXgoJ3BsYWNhJywgJ3BsYWNhJywgeyB1bmlxdWU6IGZhbHNlIH0pO1xyXG4gICAgICAgICAgICBwYXJraW5nU3RvcmUuY3JlYXRlSW5kZXgoJ3N0YXR1cycsICdzdGF0dXMnLCB7IHVuaXF1ZTogZmFsc2UgfSk7XHJcbiAgICAgICAgICAgIHBhcmtpbmdTdG9yZS5jcmVhdGVJbmRleCgnZW50cnlUaW1lJywgJ2VudHJ5VGltZScsIHsgdW5pcXVlOiBmYWxzZSB9KTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAvLyBTdG9yZSBwYXJhIHRyYWJhamFkb3Jlc1xyXG4gICAgICAgICAgaWYgKCFkYi5vYmplY3RTdG9yZU5hbWVzLmNvbnRhaW5zKCd3b3JrZXJzJykpIHtcclxuICAgICAgICAgICAgY29uc3Qgd29ya2VyU3RvcmUgPSBkYi5jcmVhdGVPYmplY3RTdG9yZSgnd29ya2VycycsIHsga2V5UGF0aDogJ2lkJyB9KTtcclxuICAgICAgICAgICAgd29ya2VyU3RvcmUuY3JlYXRlSW5kZXgoJ25hbWUnLCAnbmFtZScsIHsgdW5pcXVlOiBmYWxzZSB9KTtcclxuICAgICAgICAgICAgd29ya2VyU3RvcmUuY3JlYXRlSW5kZXgoJ2lzQWN0aXZlJywgJ2lzQWN0aXZlJywgeyB1bmlxdWU6IGZhbHNlIH0pO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIC8vIFN0b3JlIHBhcmEgc2VydmljaW9zIGRlIGxhdmFkZXJvXHJcbiAgICAgICAgICBpZiAoIWRiLm9iamVjdFN0b3JlTmFtZXMuY29udGFpbnMoJ2Nhcndhc2hfc2VydmljZXMnKSkge1xyXG4gICAgICAgICAgICBjb25zdCBzZXJ2aWNlU3RvcmUgPSBkYi5jcmVhdGVPYmplY3RTdG9yZSgnY2Fyd2FzaF9zZXJ2aWNlcycsIHsga2V5UGF0aDogJ2lkJyB9KTtcclxuICAgICAgICAgICAgc2VydmljZVN0b3JlLmNyZWF0ZUluZGV4KCd2ZWhpY2xlVHlwZScsICd2ZWhpY2xlVHlwZScsIHsgdW5pcXVlOiBmYWxzZSB9KTtcclxuICAgICAgICAgICAgc2VydmljZVN0b3JlLmNyZWF0ZUluZGV4KCdpc0FjdGl2ZScsICdpc0FjdGl2ZScsIHsgdW5pcXVlOiBmYWxzZSB9KTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAvLyBTdG9yZSBwYXJhIHRyYW5zYWNjaW9uZXMgZGUgbGF2YWRlcm9cclxuICAgICAgICAgIGlmICghZGIub2JqZWN0U3RvcmVOYW1lcy5jb250YWlucygnY2Fyd2FzaF90cmFuc2FjdGlvbnMnKSkge1xyXG4gICAgICAgICAgICBjb25zdCB0cmFuc2FjdGlvblN0b3JlID0gZGIuY3JlYXRlT2JqZWN0U3RvcmUoJ2Nhcndhc2hfdHJhbnNhY3Rpb25zJywgeyBrZXlQYXRoOiAnaWQnIH0pO1xyXG4gICAgICAgICAgICB0cmFuc2FjdGlvblN0b3JlLmNyZWF0ZUluZGV4KCdwbGFjYScsICdwbGFjYScsIHsgdW5pcXVlOiBmYWxzZSB9KTtcclxuICAgICAgICAgICAgdHJhbnNhY3Rpb25TdG9yZS5jcmVhdGVJbmRleCgnc3RhdHVzJywgJ3N0YXR1cycsIHsgdW5pcXVlOiBmYWxzZSB9KTtcclxuICAgICAgICAgICAgdHJhbnNhY3Rpb25TdG9yZS5jcmVhdGVJbmRleCgnd29ya2VySWQnLCAnd29ya2VySWQnLCB7IHVuaXF1ZTogZmFsc2UgfSk7XHJcbiAgICAgICAgICAgIHRyYW5zYWN0aW9uU3RvcmUuY3JlYXRlSW5kZXgoJ2NyZWF0ZWRBdCcsICdjcmVhdGVkQXQnLCB7IHVuaXF1ZTogZmFsc2UgfSk7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgLy8gU3RvcmUgcGFyYSBjb25maWd1cmFjacOzbiBkZWwgbmVnb2Npb1xyXG4gICAgICAgICAgaWYgKCFkYi5vYmplY3RTdG9yZU5hbWVzLmNvbnRhaW5zKCdidXNpbmVzc19jb25maWcnKSkge1xyXG4gICAgICAgICAgICBkYi5jcmVhdGVPYmplY3RTdG9yZSgnYnVzaW5lc3NfY29uZmlnJywgeyBrZXlQYXRoOiAnaWQnIH0pO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIC8vIFN0b3JlIHBhcmEgaGlzdG9yaWFsIGRlIHZlaMOtY3Vsb3MgKHJlcG9ydGVzKVxyXG4gICAgICAgICAgaWYgKCFkYi5vYmplY3RTdG9yZU5hbWVzLmNvbnRhaW5zKCd2ZWhpY2xlX2hpc3RvcnknKSkge1xyXG4gICAgICAgICAgICBjb25zdCBoaXN0b3J5U3RvcmUgPSBkYi5jcmVhdGVPYmplY3RTdG9yZSgndmVoaWNsZV9oaXN0b3J5JywgeyBrZXlQYXRoOiAnaWQnIH0pO1xyXG4gICAgICAgICAgICBoaXN0b3J5U3RvcmUuY3JlYXRlSW5kZXgoJ3BsYWNhJywgJ3BsYWNhJywgeyB1bmlxdWU6IGZhbHNlIH0pO1xyXG4gICAgICAgICAgICBoaXN0b3J5U3RvcmUuY3JlYXRlSW5kZXgoJ2ZlY2hhJywgJ2ZlY2hhJywgeyB1bmlxdWU6IGZhbHNlIH0pO1xyXG4gICAgICAgICAgICBoaXN0b3J5U3RvcmUuY3JlYXRlSW5kZXgoJ3RpcG8nLCAndGlwbycsIHsgdW5pcXVlOiBmYWxzZSB9KTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIHRoaXMuaXNJbml0aWFsaXplZCA9IHRydWU7XHJcbiAgICAgIGNvbnNvbGUubG9nKCfinIUgTG9jYWxEYXRhYmFzZSBpbmljaWFsaXphZGEgY29ycmVjdGFtZW50ZScpO1xyXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgY29uc29sZS5lcnJvcign4p2MIEVycm9yIGluaWNpYWxpemFuZG8gTG9jYWxEYXRhYmFzZTonLCBlcnJvcik7XHJcbiAgICAgIHRocm93IGVycm9yO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gPT09IE3DiVRPRE9TIFBBUkEgVkVIw41DVUxPUyA9PT1cclxuICBhc3luYyBzYXZlVmVoaWNsZSh2ZWhpY2xlOiBWZWhpY2xlKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICBhd2FpdCB0aGlzLmluaXQoKTtcclxuICAgIGF3YWl0IHRoaXMuZGIucHV0KCd2ZWhpY2xlcycsIHZlaGljbGUpO1xyXG4gICAgY29uc29sZS5sb2coYOKchSBWZWjDrWN1bG8gZ3VhcmRhZG8gbG9jYWxtZW50ZTogJHt2ZWhpY2xlLnBsYWNhfWApO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgZ2V0VmVoaWNsZSh2ZWhpY2xlSWQ6IHN0cmluZyk6IFByb21pc2U8VmVoaWNsZSB8IG51bGw+IHtcclxuICAgIGF3YWl0IHRoaXMuaW5pdCgpO1xyXG4gICAgcmV0dXJuIChhd2FpdCB0aGlzLmRiLmdldCgndmVoaWNsZXMnLCB2ZWhpY2xlSWQpKSB8fCBudWxsO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgZ2V0QWxsVmVoaWNsZXMoKTogUHJvbWlzZTxWZWhpY2xlW10+IHtcclxuICAgIGF3YWl0IHRoaXMuaW5pdCgpO1xyXG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuZGIuZ2V0QWxsKCd2ZWhpY2xlcycpO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgdXBkYXRlVmVoaWNsZSh2ZWhpY2xlOiBWZWhpY2xlKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICBhd2FpdCB0aGlzLmluaXQoKTtcclxuICAgIHZlaGljbGUudXBkYXRlZEF0ID0gbmV3IERhdGUoKTtcclxuICAgIGF3YWl0IHRoaXMuZGIucHV0KCd2ZWhpY2xlcycsIHZlaGljbGUpO1xyXG4gICAgY29uc29sZS5sb2coYOKchSBWZWjDrWN1bG8gYWN0dWFsaXphZG8gbG9jYWxtZW50ZTogJHt2ZWhpY2xlLnBsYWNhfWApO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgZGVsZXRlVmVoaWNsZSh2ZWhpY2xlSWQ6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgYXdhaXQgdGhpcy5pbml0KCk7XHJcbiAgICBhd2FpdCB0aGlzLmRiLmRlbGV0ZSgndmVoaWNsZXMnLCB2ZWhpY2xlSWQpO1xyXG4gICAgY29uc29sZS5sb2coYOKchSBWZWjDrWN1bG8gZWxpbWluYWRvIGxvY2FsbWVudGU6ICR7dmVoaWNsZUlkfWApO1xyXG4gIH1cclxuXHJcbiAgLy8gPT09IE3DiVRPRE9TIFBBUkEgVElDS0VUUyBERSBQQVJRVUVBREVSTyA9PT1cclxuICBhc3luYyBzYXZlUGFya2luZ1RpY2tldCh0aWNrZXQ6IFBhcmtpbmdUaWNrZXQpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIGF3YWl0IHRoaXMuaW5pdCgpO1xyXG4gICAgYXdhaXQgdGhpcy5kYi5wdXQoJ3BhcmtpbmdfdGlja2V0cycsIHRpY2tldCk7XHJcbiAgICBjb25zb2xlLmxvZyhg4pyFIFRpY2tldCBkZSBwYXJxdWVhZGVybyBndWFyZGFkbyBsb2NhbG1lbnRlOiAke3RpY2tldC5wbGFjYX1gKTtcclxuICB9XHJcblxyXG4gIGFzeW5jIGdldFBhcmtpbmdUaWNrZXQodGlja2V0SWQ6IHN0cmluZyk6IFByb21pc2U8UGFya2luZ1RpY2tldCB8IG51bGw+IHtcclxuICAgIGF3YWl0IHRoaXMuaW5pdCgpO1xyXG4gICAgcmV0dXJuIChhd2FpdCB0aGlzLmRiLmdldCgncGFya2luZ190aWNrZXRzJywgdGlja2V0SWQpKSB8fCBudWxsO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgZ2V0UGFya2luZ1RpY2tldHMoc3RhdHVzPzogJ2FjdGl2ZScgfCAnY29tcGxldGVkJyB8ICdjYW5jZWxsZWQnKTogUHJvbWlzZTxQYXJraW5nVGlja2V0W10+IHtcclxuICAgIGF3YWl0IHRoaXMuaW5pdCgpO1xyXG4gICAgXHJcbiAgICBpZiAoc3RhdHVzKSB7XHJcbiAgICAgIGNvbnN0IHR4ID0gdGhpcy5kYi50cmFuc2FjdGlvbigncGFya2luZ190aWNrZXRzJywgJ3JlYWRvbmx5Jyk7XHJcbiAgICAgIGNvbnN0IGluZGV4ID0gdHguc3RvcmUuaW5kZXgoJ3N0YXR1cycpO1xyXG4gICAgICByZXR1cm4gYXdhaXQgaW5kZXguZ2V0QWxsKHN0YXR1cyk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHJldHVybiBhd2FpdCB0aGlzLmRiLmdldEFsbCgncGFya2luZ190aWNrZXRzJyk7XHJcbiAgfVxyXG5cclxuICBhc3luYyB1cGRhdGVQYXJraW5nVGlja2V0KHRpY2tldDogUGFya2luZ1RpY2tldCk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgYXdhaXQgdGhpcy5pbml0KCk7XHJcbiAgICB0aWNrZXQudXBkYXRlZEF0ID0gbmV3IERhdGUoKTtcclxuICAgIGF3YWl0IHRoaXMuZGIucHV0KCdwYXJraW5nX3RpY2tldHMnLCB0aWNrZXQpO1xyXG4gICAgY29uc29sZS5sb2coYOKchSBUaWNrZXQgZGUgcGFycXVlYWRlcm8gYWN0dWFsaXphZG8gbG9jYWxtZW50ZTogJHt0aWNrZXQucGxhY2F9YCk7XHJcbiAgfVxyXG5cclxuICBhc3luYyBjb21wbGV0ZVBhcmtpbmdUaWNrZXQodGlja2V0SWQ6IHN0cmluZywgZXhpdFRpbWU/OiBEYXRlKTogUHJvbWlzZTxQYXJraW5nVGlja2V0PiB7XHJcbiAgICBhd2FpdCB0aGlzLmluaXQoKTtcclxuICAgIFxyXG4gICAgY29uc3QgdGlja2V0ID0gYXdhaXQgdGhpcy5nZXRQYXJraW5nVGlja2V0KHRpY2tldElkKTtcclxuICAgIGlmICghdGlja2V0KSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVGlja2V0IG5vIGVuY29udHJhZG86ICR7dGlja2V0SWR9YCk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgZXhpdCA9IGV4aXRUaW1lIHx8IG5ldyBEYXRlKCk7XHJcbiAgICBjb25zdCBlbnRyeSA9IG5ldyBEYXRlKHRpY2tldC5lbnRyeVRpbWUpO1xyXG4gICAgY29uc3QgdG90YWxNaW51dGVzID0gTWF0aC5tYXgoMSwgTWF0aC5mbG9vcigoZXhpdC5nZXRUaW1lKCkgLSBlbnRyeS5nZXRUaW1lKCkpIC8gKDEwMDAgKiA2MCkpKTtcclxuICAgIFxyXG4gICAgLy8gQ2FsY3VsYXIgZWwgbW9udG8gdG90YWwgYmFzYWRvIGVuIGVsIHByZWNpbyBiYXNlIHkgdGllbXBvXHJcbiAgICAvLyBTaSB5YSB0aWVuZSB0b3RhbEFtb3VudCwgdXNhcmxvLCBzaW5vIGNhbGN1bGFyXHJcbiAgICBjb25zdCB0b3RhbEFtb3VudCA9IHRpY2tldC50b3RhbEFtb3VudCB8fCB0aWNrZXQuYmFzZVByaWNlO1xyXG5cclxuICAgIGNvbnN0IHVwZGF0ZWRUaWNrZXQ6IFBhcmtpbmdUaWNrZXQgPSB7XHJcbiAgICAgIC4uLnRpY2tldCxcclxuICAgICAgZXhpdFRpbWU6IGV4aXQsXHJcbiAgICAgIHRvdGFsTWludXRlcyxcclxuICAgICAgdG90YWxBbW91bnQsXHJcbiAgICAgIHN0YXR1czogJ2NvbXBsZXRlZCcsXHJcbiAgICAgIGlzUGFpZDogdHJ1ZSxcclxuICAgICAgdXBkYXRlZEF0OiBuZXcgRGF0ZSgpXHJcbiAgICB9O1xyXG5cclxuICAgIGF3YWl0IHRoaXMudXBkYXRlUGFya2luZ1RpY2tldCh1cGRhdGVkVGlja2V0KTtcclxuICAgIGNvbnNvbGUubG9nKGDinIUgVGlja2V0IGNvbXBsZXRhZG8gbG9jYWxtZW50ZTogJHt0aWNrZXQucGxhY2F9IC0gJCR7dG90YWxBbW91bnR9YCk7XHJcbiAgICByZXR1cm4gdXBkYXRlZFRpY2tldDtcclxuICB9XHJcblxyXG4gIGFzeW5jIGRlbGV0ZVBhcmtpbmdUaWNrZXQodGlja2V0SWQ6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgYXdhaXQgdGhpcy5pbml0KCk7XHJcbiAgICBhd2FpdCB0aGlzLmRiLmRlbGV0ZSgncGFya2luZ190aWNrZXRzJywgdGlja2V0SWQpO1xyXG4gICAgY29uc29sZS5sb2coYOKchSBUaWNrZXQgZWxpbWluYWRvIGxvY2FsbWVudGU6ICR7dGlja2V0SWR9YCk7XHJcbiAgfVxyXG5cclxuICAvLyA9PT0gTcOJVE9ET1MgUEFSQSBUUkFCQUpBRE9SRVMgPT09XHJcbiAgYXN5bmMgc2F2ZVdvcmtlcih3b3JrZXI6IFdvcmtlcik6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgYXdhaXQgdGhpcy5pbml0KCk7XHJcbiAgICBhd2FpdCB0aGlzLmRiLnB1dCgnd29ya2VycycsIHdvcmtlcik7XHJcbiAgICBjb25zb2xlLmxvZyhg4pyFIFRyYWJhamFkb3IgZ3VhcmRhZG8gbG9jYWxtZW50ZTogJHt3b3JrZXIubmFtZX1gKTtcclxuICB9XHJcblxyXG4gIGFzeW5jIGdldFdvcmtlcih3b3JrZXJJZDogc3RyaW5nKTogUHJvbWlzZTxXb3JrZXIgfCBudWxsPiB7XHJcbiAgICBhd2FpdCB0aGlzLmluaXQoKTtcclxuICAgIHJldHVybiAoYXdhaXQgdGhpcy5kYi5nZXQoJ3dvcmtlcnMnLCB3b3JrZXJJZCkpIHx8IG51bGw7XHJcbiAgfVxyXG5cclxuICBhc3luYyBnZXRBbGxXb3JrZXJzKGFjdGl2ZU9ubHk6IGJvb2xlYW4gPSBmYWxzZSk6IFByb21pc2U8V29ya2VyW10+IHtcclxuICAgIGF3YWl0IHRoaXMuaW5pdCgpO1xyXG4gICAgXHJcbiAgICBjb25zdCBhbGxXb3JrZXJzID0gYXdhaXQgdGhpcy5kYi5nZXRBbGwoJ3dvcmtlcnMnKTtcclxuICAgIFxyXG4gICAgaWYgKGFjdGl2ZU9ubHkpIHtcclxuICAgICAgcmV0dXJuIGFsbFdvcmtlcnMuZmlsdGVyKHdvcmtlciA9PiB3b3JrZXIuaXNBY3RpdmUpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICByZXR1cm4gYWxsV29ya2VycztcclxuICB9XHJcblxyXG4gIGFzeW5jIHVwZGF0ZVdvcmtlcih3b3JrZXI6IFdvcmtlcik6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgYXdhaXQgdGhpcy5pbml0KCk7XHJcbiAgICB3b3JrZXIudXBkYXRlZEF0ID0gbmV3IERhdGUoKTtcclxuICAgIGF3YWl0IHRoaXMuZGIucHV0KCd3b3JrZXJzJywgd29ya2VyKTtcclxuICAgIGNvbnNvbGUubG9nKGDinIUgVHJhYmFqYWRvciBhY3R1YWxpemFkbyBsb2NhbG1lbnRlOiAke3dvcmtlci5uYW1lfWApO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgZGVsZXRlV29ya2VyKHdvcmtlcklkOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIGF3YWl0IHRoaXMuaW5pdCgpO1xyXG4gICAgYXdhaXQgdGhpcy5kYi5kZWxldGUoJ3dvcmtlcnMnLCB3b3JrZXJJZCk7XHJcbiAgICBjb25zb2xlLmxvZyhg4pyFIFRyYWJhamFkb3IgZWxpbWluYWRvIGxvY2FsbWVudGU6ICR7d29ya2VySWR9YCk7XHJcbiAgfVxyXG5cclxuICAvLyA9PT0gTcOJVE9ET1MgUEFSQSBTRVJWSUNJT1MgREUgTEFWQURFUk8gPT09XHJcbiAgYXN5bmMgc2F2ZUNhcndhc2hTZXJ2aWNlKHNlcnZpY2U6IENhcndhc2hTZXJ2aWNlKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICBhd2FpdCB0aGlzLmluaXQoKTtcclxuICAgIGF3YWl0IHRoaXMuZGIucHV0KCdjYXJ3YXNoX3NlcnZpY2VzJywgc2VydmljZSk7XHJcbiAgICBjb25zb2xlLmxvZyhg4pyFIFNlcnZpY2lvIGRlIGxhdmFkZXJvIGd1YXJkYWRvIGxvY2FsbWVudGU6ICR7c2VydmljZS5zZXJ2aWNlTmFtZX1gKTtcclxuICB9XHJcblxyXG4gIGFzeW5jIGdldENhcndhc2hTZXJ2aWNlKHNlcnZpY2VJZDogc3RyaW5nKTogUHJvbWlzZTxDYXJ3YXNoU2VydmljZSB8IG51bGw+IHtcclxuICAgIGF3YWl0IHRoaXMuaW5pdCgpO1xyXG4gICAgcmV0dXJuIChhd2FpdCB0aGlzLmRiLmdldCgnY2Fyd2FzaF9zZXJ2aWNlcycsIHNlcnZpY2VJZCkpIHx8IG51bGw7XHJcbiAgfVxyXG5cclxuICBhc3luYyBnZXRBbGxDYXJ3YXNoU2VydmljZXMoYWN0aXZlT25seTogYm9vbGVhbiA9IGZhbHNlKTogUHJvbWlzZTxDYXJ3YXNoU2VydmljZVtdPiB7XHJcbiAgICBhd2FpdCB0aGlzLmluaXQoKTtcclxuICAgIFxyXG4gICAgY29uc3QgYWxsU2VydmljZXMgPSBhd2FpdCB0aGlzLmRiLmdldEFsbCgnY2Fyd2FzaF9zZXJ2aWNlcycpO1xyXG4gICAgXHJcbiAgICBpZiAoYWN0aXZlT25seSkge1xyXG4gICAgICByZXR1cm4gYWxsU2VydmljZXMuZmlsdGVyKHNlcnZpY2UgPT4gc2VydmljZS5pc0FjdGl2ZSk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHJldHVybiBhbGxTZXJ2aWNlcztcclxuICB9XHJcblxyXG4gIGFzeW5jIHVwZGF0ZUNhcndhc2hTZXJ2aWNlKHNlcnZpY2U6IENhcndhc2hTZXJ2aWNlKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICBhd2FpdCB0aGlzLmluaXQoKTtcclxuICAgIHNlcnZpY2UudXBkYXRlZEF0ID0gbmV3IERhdGUoKTtcclxuICAgIGF3YWl0IHRoaXMuZGIucHV0KCdjYXJ3YXNoX3NlcnZpY2VzJywgc2VydmljZSk7XHJcbiAgICBjb25zb2xlLmxvZyhg4pyFIFNlcnZpY2lvIGRlIGxhdmFkZXJvIGFjdHVhbGl6YWRvIGxvY2FsbWVudGU6ICR7c2VydmljZS5zZXJ2aWNlTmFtZX1gKTtcclxuICB9XHJcblxyXG4gIGFzeW5jIGRlbGV0ZUNhcndhc2hTZXJ2aWNlKHNlcnZpY2VJZDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICBhd2FpdCB0aGlzLmluaXQoKTtcclxuICAgIGF3YWl0IHRoaXMuZGIuZGVsZXRlKCdjYXJ3YXNoX3NlcnZpY2VzJywgc2VydmljZUlkKTtcclxuICAgIGNvbnNvbGUubG9nKGDinIUgU2VydmljaW8gZWxpbWluYWRvIGxvY2FsbWVudGU6ICR7c2VydmljZUlkfWApO1xyXG4gIH1cclxuXHJcbiAgLy8gPT09IE3DiVRPRE9TIFBBUkEgVFJBTlNBQ0NJT05FUyBERSBMQVZBREVSTyA9PT1cclxuICBhc3luYyBzYXZlQ2Fyd2FzaFRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uOiBDYXJ3YXNoVHJhbnNhY3Rpb24pOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIGF3YWl0IHRoaXMuaW5pdCgpO1xyXG4gICAgYXdhaXQgdGhpcy5kYi5wdXQoJ2Nhcndhc2hfdHJhbnNhY3Rpb25zJywgdHJhbnNhY3Rpb24pO1xyXG4gICAgY29uc29sZS5sb2coYOKchSBUcmFuc2FjY2nDs24gZGUgbGF2YWRlcm8gZ3VhcmRhZGEgbG9jYWxtZW50ZTogJHt0cmFuc2FjdGlvbi5wbGFjYX1gKTtcclxuICB9XHJcblxyXG4gIGFzeW5jIGdldENhcndhc2hUcmFuc2FjdGlvbih0cmFuc2FjdGlvbklkOiBzdHJpbmcpOiBQcm9taXNlPENhcndhc2hUcmFuc2FjdGlvbiB8IG51bGw+IHtcclxuICAgIGF3YWl0IHRoaXMuaW5pdCgpO1xyXG4gICAgcmV0dXJuIChhd2FpdCB0aGlzLmRiLmdldCgnY2Fyd2FzaF90cmFuc2FjdGlvbnMnLCB0cmFuc2FjdGlvbklkKSkgfHwgbnVsbDtcclxuICB9XHJcblxyXG4gIGFzeW5jIGdldEFsbENhcndhc2hUcmFuc2FjdGlvbnMoc3RhdHVzPzogc3RyaW5nKTogUHJvbWlzZTxDYXJ3YXNoVHJhbnNhY3Rpb25bXT4ge1xyXG4gICAgYXdhaXQgdGhpcy5pbml0KCk7XHJcbiAgICBcclxuICAgIGlmIChzdGF0dXMpIHtcclxuICAgICAgY29uc3QgdHggPSB0aGlzLmRiLnRyYW5zYWN0aW9uKCdjYXJ3YXNoX3RyYW5zYWN0aW9ucycsICdyZWFkb25seScpO1xyXG4gICAgICBjb25zdCBpbmRleCA9IHR4LnN0b3JlLmluZGV4KCdzdGF0dXMnKTtcclxuICAgICAgcmV0dXJuIGF3YWl0IGluZGV4LmdldEFsbChzdGF0dXMpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5kYi5nZXRBbGwoJ2Nhcndhc2hfdHJhbnNhY3Rpb25zJyk7XHJcbiAgfVxyXG5cclxuICBhc3luYyB1cGRhdGVDYXJ3YXNoVHJhbnNhY3Rpb24odHJhbnNhY3Rpb246IENhcndhc2hUcmFuc2FjdGlvbik6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgYXdhaXQgdGhpcy5pbml0KCk7XHJcbiAgICB0cmFuc2FjdGlvbi51cGRhdGVkQXQgPSBuZXcgRGF0ZSgpO1xyXG4gICAgYXdhaXQgdGhpcy5kYi5wdXQoJ2Nhcndhc2hfdHJhbnNhY3Rpb25zJywgdHJhbnNhY3Rpb24pO1xyXG4gICAgY29uc29sZS5sb2coYOKchSBUcmFuc2FjY2nDs24gYWN0dWFsaXphZGEgbG9jYWxtZW50ZTogJHt0cmFuc2FjdGlvbi5wbGFjYX1gKTtcclxuICB9XHJcblxyXG4gIGFzeW5jIGRlbGV0ZUNhcndhc2hUcmFuc2FjdGlvbih0cmFuc2FjdGlvbklkOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIGF3YWl0IHRoaXMuaW5pdCgpO1xyXG4gICAgYXdhaXQgdGhpcy5kYi5kZWxldGUoJ2Nhcndhc2hfdHJhbnNhY3Rpb25zJywgdHJhbnNhY3Rpb25JZCk7XHJcbiAgICBjb25zb2xlLmxvZyhg4pyFIFRyYW5zYWNjacOzbiBlbGltaW5hZGEgbG9jYWxtZW50ZTogJHt0cmFuc2FjdGlvbklkfWApO1xyXG4gIH1cclxuXHJcbiAgLy8gPT09IE3DiVRPRE9TIFBBUkEgQ09ORklHVVJBQ0nDk04gREVMIE5FR09DSU8gPT09XHJcbiAgYXN5bmMgc2F2ZUJ1c2luZXNzQ29uZmlnKGNvbmZpZzogQnVzaW5lc3NDb25maWcpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIGF3YWl0IHRoaXMuaW5pdCgpO1xyXG4gICAgYXdhaXQgdGhpcy5kYi5wdXQoJ2J1c2luZXNzX2NvbmZpZycsIGNvbmZpZyk7XHJcbiAgICBjb25zb2xlLmxvZyhg4pyFIENvbmZpZ3VyYWNpw7NuIGd1YXJkYWRhIGxvY2FsbWVudGU6ICR7Y29uZmlnLmJ1c2luZXNzTmFtZX1gKTtcclxuICB9XHJcblxyXG4gIGFzeW5jIGdldEJ1c2luZXNzQ29uZmlnKCk6IFByb21pc2U8QnVzaW5lc3NDb25maWcgfCBudWxsPiB7XHJcbiAgICBhd2FpdCB0aGlzLmluaXQoKTtcclxuICAgIGNvbnN0IGNvbmZpZ3MgPSBhd2FpdCB0aGlzLmRiLmdldEFsbCgnYnVzaW5lc3NfY29uZmlnJyk7XHJcbiAgICByZXR1cm4gY29uZmlncy5sZW5ndGggPiAwID8gY29uZmlnc1swXSA6IG51bGw7XHJcbiAgfVxyXG5cclxuICAvLyA9PT0gTcOJVE9ET1MgUEFSQSBISVNUT1JJQUwgKFJFUE9SVEVTKSA9PT1cclxuICBhc3luYyBzYXZlUGFya2luZ1JlY29yZChyZWNvcmQ6IGFueSk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgYXdhaXQgdGhpcy5pbml0KCk7XHJcbiAgICBhd2FpdCB0aGlzLmRiLnB1dCgndmVoaWNsZV9oaXN0b3J5JywgcmVjb3JkKTtcclxuICAgIGNvbnNvbGUubG9nKGDinIUgUmVnaXN0cm8gZGUgaGlzdG9yaWFsIGd1YXJkYWRvIGxvY2FsbWVudGU6ICR7cmVjb3JkLnBsYWNhfWApO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgZ2V0UGFya2luZ0hpc3RvcnkoKTogUHJvbWlzZTxhbnlbXT4ge1xyXG4gICAgYXdhaXQgdGhpcy5pbml0KCk7XHJcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5kYi5nZXRBbGwoJ3ZlaGljbGVfaGlzdG9yeScpO1xyXG4gIH1cclxuXHJcbiAgLy8gPT09IE3DiVRPRE9TIERFIFVUSUxJREFEID09PVxyXG4gIGFzeW5jIGNsZWFyQWxsRGF0YSgpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIGF3YWl0IHRoaXMuaW5pdCgpO1xyXG4gICAgXHJcbiAgICBjb25zdCBzdG9yZXMgPSBbXHJcbiAgICAgICd2ZWhpY2xlcycsXHJcbiAgICAgICdwYXJraW5nX3RpY2tldHMnLCBcclxuICAgICAgJ3dvcmtlcnMnLFxyXG4gICAgICAnY2Fyd2FzaF9zZXJ2aWNlcycsXHJcbiAgICAgICdjYXJ3YXNoX3RyYW5zYWN0aW9ucycsXHJcbiAgICAgICdidXNpbmVzc19jb25maWcnLFxyXG4gICAgICAndmVoaWNsZV9oaXN0b3J5J1xyXG4gICAgXTtcclxuXHJcbiAgICBmb3IgKGNvbnN0IHN0b3JlTmFtZSBvZiBzdG9yZXMpIHtcclxuICAgICAgYXdhaXQgdGhpcy5kYi5jbGVhcihzdG9yZU5hbWUpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBjb25zb2xlLmxvZygn4pyFIFRvZG9zIGxvcyBkYXRvcyBsb2NhbGVzIGhhbiBzaWRvIGVsaW1pbmFkb3MnKTtcclxuICB9XHJcblxyXG4gIGFzeW5jIGV4cG9ydERhdGEoKTogUHJvbWlzZTxhbnk+IHtcclxuICAgIGF3YWl0IHRoaXMuaW5pdCgpO1xyXG4gICAgXHJcbiAgICBjb25zdCBkYXRhID0ge1xyXG4gICAgICB2ZWhpY2xlczogYXdhaXQgdGhpcy5kYi5nZXRBbGwoJ3ZlaGljbGVzJyksXHJcbiAgICAgIHBhcmtpbmdUaWNrZXRzOiBhd2FpdCB0aGlzLmRiLmdldEFsbCgncGFya2luZ190aWNrZXRzJyksXHJcbiAgICAgIHdvcmtlcnM6IGF3YWl0IHRoaXMuZGIuZ2V0QWxsKCd3b3JrZXJzJyksXHJcbiAgICAgIGNhcndhc2hTZXJ2aWNlczogYXdhaXQgdGhpcy5kYi5nZXRBbGwoJ2Nhcndhc2hfc2VydmljZXMnKSxcclxuICAgICAgY2Fyd2FzaFRyYW5zYWN0aW9uczogYXdhaXQgdGhpcy5kYi5nZXRBbGwoJ2Nhcndhc2hfdHJhbnNhY3Rpb25zJyksXHJcbiAgICAgIGJ1c2luZXNzQ29uZmlnOiBhd2FpdCB0aGlzLmRiLmdldEFsbCgnYnVzaW5lc3NfY29uZmlnJyksXHJcbiAgICAgIHZlaGljbGVIaXN0b3J5OiBhd2FpdCB0aGlzLmRiLmdldEFsbCgndmVoaWNsZV9oaXN0b3J5JyksXHJcbiAgICAgIGV4cG9ydERhdGU6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKVxyXG4gICAgfTtcclxuXHJcbiAgICBjb25zb2xlLmxvZygn4pyFIERhdG9zIGV4cG9ydGFkb3MgY29ycmVjdGFtZW50ZScpO1xyXG4gICAgcmV0dXJuIGRhdGE7XHJcbiAgfVxyXG5cclxuICBhc3luYyBpbXBvcnREYXRhKGRhdGE6IGFueSk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgYXdhaXQgdGhpcy5pbml0KCk7XHJcbiAgICBcclxuICAgIHRyeSB7XHJcbiAgICAgIC8vIExpbXBpYXIgZGF0b3MgZXhpc3RlbnRlc1xyXG4gICAgICBhd2FpdCB0aGlzLmNsZWFyQWxsRGF0YSgpO1xyXG5cclxuICAgICAgLy8gSW1wb3J0YXIgY2FkYSB0aXBvIGRlIGRhdG9cclxuICAgICAgaWYgKGRhdGEudmVoaWNsZXMpIHtcclxuICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgZGF0YS52ZWhpY2xlcykge1xyXG4gICAgICAgICAgYXdhaXQgdGhpcy5kYi5wdXQoJ3ZlaGljbGVzJywgaXRlbSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoZGF0YS5wYXJraW5nVGlja2V0cykge1xyXG4gICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiBkYXRhLnBhcmtpbmdUaWNrZXRzKSB7XHJcbiAgICAgICAgICBhd2FpdCB0aGlzLmRiLnB1dCgncGFya2luZ190aWNrZXRzJywgaXRlbSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoZGF0YS53b3JrZXJzKSB7XHJcbiAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIGRhdGEud29ya2Vycykge1xyXG4gICAgICAgICAgYXdhaXQgdGhpcy5kYi5wdXQoJ3dvcmtlcnMnLCBpdGVtKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChkYXRhLmNhcndhc2hTZXJ2aWNlcykge1xyXG4gICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiBkYXRhLmNhcndhc2hTZXJ2aWNlcykge1xyXG4gICAgICAgICAgYXdhaXQgdGhpcy5kYi5wdXQoJ2Nhcndhc2hfc2VydmljZXMnLCBpdGVtKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChkYXRhLmNhcndhc2hUcmFuc2FjdGlvbnMpIHtcclxuICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgZGF0YS5jYXJ3YXNoVHJhbnNhY3Rpb25zKSB7XHJcbiAgICAgICAgICBhd2FpdCB0aGlzLmRiLnB1dCgnY2Fyd2FzaF90cmFuc2FjdGlvbnMnLCBpdGVtKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChkYXRhLmJ1c2luZXNzQ29uZmlnKSB7XHJcbiAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIGRhdGEuYnVzaW5lc3NDb25maWcpIHtcclxuICAgICAgICAgIGF3YWl0IHRoaXMuZGIucHV0KCdidXNpbmVzc19jb25maWcnLCBpdGVtKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChkYXRhLnZlaGljbGVIaXN0b3J5KSB7XHJcbiAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIGRhdGEudmVoaWNsZUhpc3RvcnkpIHtcclxuICAgICAgICAgIGF3YWl0IHRoaXMuZGIucHV0KCd2ZWhpY2xlX2hpc3RvcnknLCBpdGVtKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnNvbGUubG9nKCfinIUgRGF0b3MgaW1wb3J0YWRvcyBjb3JyZWN0YW1lbnRlJyk7XHJcbiAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCfinYwgRXJyb3IgaW1wb3J0YW5kbyBkYXRvczonLCBlcnJvcik7XHJcbiAgICAgIHRocm93IGVycm9yO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gPT09IE3DiVRPRE9TIFBBUkEgVElQT1MgREUgVkVIw41DVUxPUyA9PT1cclxuICBhc3luYyBzYXZlVmVoaWNsZVR5cGUodmVoaWNsZVR5cGU6IFZlaGljbGVUeXBlQ29uZmlnKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICBhd2FpdCB0aGlzLmluaXQoKTtcclxuICAgIFxyXG4gICAgLy8gT2J0ZW5lciBjb25maWd1cmFjacOzbiBhY3R1YWwgbyBjcmVhciB1bmEgcG9yIGRlZmVjdG9cclxuICAgIGxldCBjb25maWcgPSBhd2FpdCB0aGlzLmdldEJ1c2luZXNzQ29uZmlnKCk7XHJcbiAgICBpZiAoIWNvbmZpZykge1xyXG4gICAgICBjb25zb2xlLmxvZygn4pqg77iPIE5vIGV4aXN0ZSBjb25maWd1cmFjacOzbiwgY3JlYW5kbyB1bmEgcG9yIGRlZmVjdG8uLi4nKTtcclxuICAgICAgY29uZmlnID0ge1xyXG4gICAgICAgIGJ1c2luZXNzTmFtZTogJ1dpbHNvbiBDYXJzICYgV2FzaCcsXHJcbiAgICAgICAgbml0OiAnMDAwMDAwMDAwLTAnLFxyXG4gICAgICAgIGFkZHJlc3M6ICcnLFxyXG4gICAgICAgIHBob25lOiAnJyxcclxuICAgICAgICBlbWFpbDogJycsXHJcbiAgICAgICAgdmVoaWNsZVR5cGVzOiBbXSxcclxuICAgICAgICB0aWNrZXREYXRhOiB7XHJcbiAgICAgICAgICBjb21wYW55TmFtZTogJ1dpbHNvbiBDYXJzICYgV2FzaCcsXHJcbiAgICAgICAgICBjb21wYW55U3VidGl0bGU6ICdQYXJxdWVhZGVybyB5IExhdmFkZXJvJyxcclxuICAgICAgICAgIG5pdDogJzAwMDAwMDAwMC0wJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY3JlYXRlZEF0OiBuZXcgRGF0ZSgpLFxyXG4gICAgICAgIHVwZGF0ZWRBdDogbmV3IERhdGUoKVxyXG4gICAgICB9O1xyXG4gICAgICBhd2FpdCB0aGlzLnNhdmVCdXNpbmVzc0NvbmZpZyhjb25maWcpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFZlcmlmaWNhciBxdWUgbm8gZXhpc3RhIHVuIHRpcG8gY29uIGVsIG1pc21vIG5vbWJyZVxyXG4gICAgY29uc3QgZXhpc3RpbmdUeXBlcyA9IGNvbmZpZy52ZWhpY2xlVHlwZXMgfHwgW107XHJcbiAgICBjb25zdCBpc0R1cGxpY2F0ZSA9IGV4aXN0aW5nVHlwZXMuc29tZSh0eXBlID0+IFxyXG4gICAgICB0eXBlLm5hbWUudG9Mb3dlckNhc2UoKSA9PT0gdmVoaWNsZVR5cGUubmFtZS50b0xvd2VyQ2FzZSgpXHJcbiAgICApO1xyXG5cclxuICAgIGlmIChpc0R1cGxpY2F0ZSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lhIGV4aXN0ZSB1biB0aXBvIGRlIHZlaMOtY3VsbyBjb24gZXN0ZSBub21icmUnKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBBZ3JlZ2FyIGVsIG51ZXZvIHRpcG9cclxuICAgIGNvbnN0IHVwZGF0ZWRDb25maWcgPSB7XHJcbiAgICAgIC4uLmNvbmZpZyxcclxuICAgICAgdmVoaWNsZVR5cGVzOiBbLi4uZXhpc3RpbmdUeXBlcywgdmVoaWNsZVR5cGVdLFxyXG4gICAgICB1cGRhdGVkQXQ6IG5ldyBEYXRlKClcclxuICAgIH07XHJcblxyXG4gICAgYXdhaXQgdGhpcy5zYXZlQnVzaW5lc3NDb25maWcodXBkYXRlZENvbmZpZyk7XHJcbiAgICBjb25zb2xlLmxvZyhg4pyFIFRpcG8gZGUgdmVow61jdWxvIGd1YXJkYWRvOiAke3ZlaGljbGVUeXBlLm5hbWV9YCk7XHJcbiAgfVxyXG5cclxuICBhc3luYyBnZXRWZWhpY2xlVHlwZXMoKTogUHJvbWlzZTxWZWhpY2xlVHlwZUNvbmZpZ1tdPiB7XHJcbiAgICBhd2FpdCB0aGlzLmluaXQoKTtcclxuICAgIFxyXG4gICAgY29uc3QgY29uZmlnID0gYXdhaXQgdGhpcy5nZXRCdXNpbmVzc0NvbmZpZygpO1xyXG4gICAgcmV0dXJuIGNvbmZpZz8udmVoaWNsZVR5cGVzIHx8IFtdO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgdXBkYXRlVmVoaWNsZVR5cGUodmVoaWNsZVR5cGVJZDogc3RyaW5nLCB1cGRhdGVzOiBQYXJ0aWFsPFZlaGljbGVUeXBlQ29uZmlnPik6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgYXdhaXQgdGhpcy5pbml0KCk7XHJcbiAgICBcclxuICAgIGNvbnN0IGNvbmZpZyA9IGF3YWl0IHRoaXMuZ2V0QnVzaW5lc3NDb25maWcoKTtcclxuICAgIGlmICghY29uZmlnKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcignTm8gc2UgZW5jb250csOzIGNvbmZpZ3VyYWNpw7NuIGRlbCBuZWdvY2lvJyk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgdmVoaWNsZVR5cGVzID0gY29uZmlnLnZlaGljbGVUeXBlcyB8fCBbXTtcclxuICAgIGNvbnN0IHR5cGVJbmRleCA9IHZlaGljbGVUeXBlcy5maW5kSW5kZXgodHlwZSA9PiB0eXBlLmlkID09PSB2ZWhpY2xlVHlwZUlkKTtcclxuICAgIFxyXG4gICAgaWYgKHR5cGVJbmRleCA9PT0gLTEpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaXBvIGRlIHZlaMOtY3VsbyBubyBlbmNvbnRyYWRvJyk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQWN0dWFsaXphciBlbCB0aXBvXHJcbiAgICB2ZWhpY2xlVHlwZXNbdHlwZUluZGV4XSA9IHtcclxuICAgICAgLi4udmVoaWNsZVR5cGVzW3R5cGVJbmRleF0sXHJcbiAgICAgIC4uLnVwZGF0ZXMsXHJcbiAgICAgIHVwZGF0ZWRBdDogbmV3IERhdGUoKVxyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCB1cGRhdGVkQ29uZmlnID0ge1xyXG4gICAgICAuLi5jb25maWcsXHJcbiAgICAgIHZlaGljbGVUeXBlcyxcclxuICAgICAgdXBkYXRlZEF0OiBuZXcgRGF0ZSgpXHJcbiAgICB9O1xyXG5cclxuICAgIGF3YWl0IHRoaXMuc2F2ZUJ1c2luZXNzQ29uZmlnKHVwZGF0ZWRDb25maWcpO1xyXG4gICAgY29uc29sZS5sb2coYOKchSBUaXBvIGRlIHZlaMOtY3VsbyBhY3R1YWxpemFkbzogJHt2ZWhpY2xlVHlwZUlkfWApO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgZGVsZXRlVmVoaWNsZVR5cGUodmVoaWNsZVR5cGVJZDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICBhd2FpdCB0aGlzLmluaXQoKTtcclxuICAgIFxyXG4gICAgY29uc3QgY29uZmlnID0gYXdhaXQgdGhpcy5nZXRCdXNpbmVzc0NvbmZpZygpO1xyXG4gICAgaWYgKCFjb25maWcpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBzZSBlbmNvbnRyw7MgY29uZmlndXJhY2nDs24gZGVsIG5lZ29jaW8nKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCB2ZWhpY2xlVHlwZXMgPSBjb25maWcudmVoaWNsZVR5cGVzIHx8IFtdO1xyXG4gICAgY29uc3QgdHlwZVRvRGVsZXRlID0gdmVoaWNsZVR5cGVzLmZpbmQodHlwZSA9PiB0eXBlLmlkID09PSB2ZWhpY2xlVHlwZUlkKTtcclxuICAgIFxyXG4gICAgaWYgKCF0eXBlVG9EZWxldGUpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaXBvIGRlIHZlaMOtY3VsbyBubyBlbmNvbnRyYWRvJyk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gTm8gcGVybWl0aXIgZWxpbWluYXIgdGlwb3MgcHJlZGV0ZXJtaW5hZG9zXHJcbiAgICBpZiAoIXR5cGVUb0RlbGV0ZS5pc0N1c3RvbSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIHNlIHB1ZWRlbiBlbGltaW5hciB0aXBvcyBkZSB2ZWjDrWN1bG8gcHJlZGV0ZXJtaW5hZG9zJyk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gRmlsdHJhciBlbCB0aXBvIGEgZWxpbWluYXJcclxuICAgIGNvbnN0IHVwZGF0ZWRWZWhpY2xlVHlwZXMgPSB2ZWhpY2xlVHlwZXMuZmlsdGVyKHR5cGUgPT4gdHlwZS5pZCAhPT0gdmVoaWNsZVR5cGVJZCk7XHJcblxyXG4gICAgY29uc3QgdXBkYXRlZENvbmZpZyA9IHtcclxuICAgICAgLi4uY29uZmlnLFxyXG4gICAgICB2ZWhpY2xlVHlwZXM6IHVwZGF0ZWRWZWhpY2xlVHlwZXMsXHJcbiAgICAgIHVwZGF0ZWRBdDogbmV3IERhdGUoKVxyXG4gICAgfTtcclxuXHJcbiAgICBhd2FpdCB0aGlzLnNhdmVCdXNpbmVzc0NvbmZpZyh1cGRhdGVkQ29uZmlnKTtcclxuICAgIGNvbnNvbGUubG9nKGDinIUgVGlwbyBkZSB2ZWjDrWN1bG8gZWxpbWluYWRvOiAke3R5cGVUb0RlbGV0ZS5uYW1lfWApO1xyXG4gIH1cclxufVxyXG5cclxuLy8gSW5zdGFuY2lhIHNpbmdsZXRvblxyXG5jb25zdCBsb2NhbERhdGFiYXNlID0gbmV3IExvY2FsRGF0YWJhc2UoKTtcclxuXHJcbi8vIEZ1bmNpw7NuIGhlbHBlciBwYXJhIG9idGVuZXIgbGEgaW5zdGFuY2lhXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRMb2NhbERCKCk6IExvY2FsRGF0YWJhc2Uge1xyXG4gIHJldHVybiBsb2NhbERhdGFiYXNlO1xyXG59XHJcblxyXG4vLyBFeHBvcnRhciBpbnN0YW5jaWEgcG9yIGRlZmVjdG9cclxuZXhwb3J0IGNvbnN0IGxvY2FsREIgPSBsb2NhbERhdGFiYXNlO1xyXG5leHBvcnQgZGVmYXVsdCBsb2NhbERhdGFiYXNlOyJdLCJuYW1lcyI6WyJvcGVuREIiLCJMb2NhbERhdGFiYXNlIiwiaW5pdCIsImlzSW5pdGlhbGl6ZWQiLCJkYiIsImRiTmFtZSIsInZlcnNpb24iLCJ1cGdyYWRlIiwib2JqZWN0U3RvcmVOYW1lcyIsImNvbnRhaW5zIiwidmVoaWNsZVN0b3JlIiwiY3JlYXRlT2JqZWN0U3RvcmUiLCJrZXlQYXRoIiwiY3JlYXRlSW5kZXgiLCJ1bmlxdWUiLCJwYXJraW5nU3RvcmUiLCJ3b3JrZXJTdG9yZSIsInNlcnZpY2VTdG9yZSIsInRyYW5zYWN0aW9uU3RvcmUiLCJoaXN0b3J5U3RvcmUiLCJjb25zb2xlIiwibG9nIiwiZXJyb3IiLCJzYXZlVmVoaWNsZSIsInZlaGljbGUiLCJwdXQiLCJwbGFjYSIsImdldFZlaGljbGUiLCJ2ZWhpY2xlSWQiLCJnZXQiLCJnZXRBbGxWZWhpY2xlcyIsImdldEFsbCIsInVwZGF0ZVZlaGljbGUiLCJ1cGRhdGVkQXQiLCJEYXRlIiwiZGVsZXRlVmVoaWNsZSIsImRlbGV0ZSIsInNhdmVQYXJraW5nVGlja2V0IiwidGlja2V0IiwiZ2V0UGFya2luZ1RpY2tldCIsInRpY2tldElkIiwiZ2V0UGFya2luZ1RpY2tldHMiLCJzdGF0dXMiLCJ0eCIsInRyYW5zYWN0aW9uIiwiaW5kZXgiLCJzdG9yZSIsInVwZGF0ZVBhcmtpbmdUaWNrZXQiLCJjb21wbGV0ZVBhcmtpbmdUaWNrZXQiLCJleGl0VGltZSIsIkVycm9yIiwiZXhpdCIsImVudHJ5IiwiZW50cnlUaW1lIiwidG90YWxNaW51dGVzIiwiTWF0aCIsIm1heCIsImZsb29yIiwiZ2V0VGltZSIsInRvdGFsQW1vdW50IiwiYmFzZVByaWNlIiwidXBkYXRlZFRpY2tldCIsImlzUGFpZCIsImRlbGV0ZVBhcmtpbmdUaWNrZXQiLCJzYXZlV29ya2VyIiwid29ya2VyIiwibmFtZSIsImdldFdvcmtlciIsIndvcmtlcklkIiwiZ2V0QWxsV29ya2VycyIsImFjdGl2ZU9ubHkiLCJhbGxXb3JrZXJzIiwiZmlsdGVyIiwiaXNBY3RpdmUiLCJ1cGRhdGVXb3JrZXIiLCJkZWxldGVXb3JrZXIiLCJzYXZlQ2Fyd2FzaFNlcnZpY2UiLCJzZXJ2aWNlIiwic2VydmljZU5hbWUiLCJnZXRDYXJ3YXNoU2VydmljZSIsInNlcnZpY2VJZCIsImdldEFsbENhcndhc2hTZXJ2aWNlcyIsImFsbFNlcnZpY2VzIiwidXBkYXRlQ2Fyd2FzaFNlcnZpY2UiLCJkZWxldGVDYXJ3YXNoU2VydmljZSIsInNhdmVDYXJ3YXNoVHJhbnNhY3Rpb24iLCJnZXRDYXJ3YXNoVHJhbnNhY3Rpb24iLCJ0cmFuc2FjdGlvbklkIiwiZ2V0QWxsQ2Fyd2FzaFRyYW5zYWN0aW9ucyIsInVwZGF0ZUNhcndhc2hUcmFuc2FjdGlvbiIsImRlbGV0ZUNhcndhc2hUcmFuc2FjdGlvbiIsInNhdmVCdXNpbmVzc0NvbmZpZyIsImNvbmZpZyIsImJ1c2luZXNzTmFtZSIsImdldEJ1c2luZXNzQ29uZmlnIiwiY29uZmlncyIsImxlbmd0aCIsInNhdmVQYXJraW5nUmVjb3JkIiwicmVjb3JkIiwiZ2V0UGFya2luZ0hpc3RvcnkiLCJjbGVhckFsbERhdGEiLCJzdG9yZXMiLCJzdG9yZU5hbWUiLCJjbGVhciIsImV4cG9ydERhdGEiLCJkYXRhIiwidmVoaWNsZXMiLCJwYXJraW5nVGlja2V0cyIsIndvcmtlcnMiLCJjYXJ3YXNoU2VydmljZXMiLCJjYXJ3YXNoVHJhbnNhY3Rpb25zIiwiYnVzaW5lc3NDb25maWciLCJ2ZWhpY2xlSGlzdG9yeSIsImV4cG9ydERhdGUiLCJ0b0lTT1N0cmluZyIsImltcG9ydERhdGEiLCJpdGVtIiwic2F2ZVZlaGljbGVUeXBlIiwidmVoaWNsZVR5cGUiLCJuaXQiLCJhZGRyZXNzIiwicGhvbmUiLCJlbWFpbCIsInZlaGljbGVUeXBlcyIsInRpY2tldERhdGEiLCJjb21wYW55TmFtZSIsImNvbXBhbnlTdWJ0aXRsZSIsImNyZWF0ZWRBdCIsImV4aXN0aW5nVHlwZXMiLCJpc0R1cGxpY2F0ZSIsInNvbWUiLCJ0eXBlIiwidG9Mb3dlckNhc2UiLCJ1cGRhdGVkQ29uZmlnIiwiZ2V0VmVoaWNsZVR5cGVzIiwidXBkYXRlVmVoaWNsZVR5cGUiLCJ2ZWhpY2xlVHlwZUlkIiwidXBkYXRlcyIsInR5cGVJbmRleCIsImZpbmRJbmRleCIsImlkIiwiZGVsZXRlVmVoaWNsZVR5cGUiLCJ0eXBlVG9EZWxldGUiLCJmaW5kIiwiaXNDdXN0b20iLCJ1cGRhdGVkVmVoaWNsZVR5cGVzIiwibG9jYWxEYXRhYmFzZSIsImdldExvY2FsREIiLCJsb2NhbERCIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/localDatabase.ts\n"));

/***/ })

});