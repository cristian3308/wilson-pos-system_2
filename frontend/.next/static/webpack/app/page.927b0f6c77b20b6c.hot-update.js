"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/lib/localDatabase.ts":
/*!**********************************!*\
  !*** ./src/lib/localDatabase.ts ***!
  \**********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getLocalDB: function() { return /* binding */ getLocalDB; },\n/* harmony export */   localDB: function() { return /* binding */ localDB; }\n/* harmony export */ });\n/* harmony import */ var idb__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! idb */ \"(app-pages-browser)/./node_modules/idb/build/index.js\");\n// Sistema de base de datos local: Solo IndexedDB (sin Firebase)\n\n// Clase principal para manejo de base de datos local\nclass LocalDatabase {\n    // Inicializar IndexedDB\n    async init() {\n        if (this.isInitialized) return;\n        try {\n            this.db = await (0,idb__WEBPACK_IMPORTED_MODULE_0__.openDB)(this.dbName, this.version, {\n                upgrade (db) {\n                    // Store para vehículos\n                    if (!db.objectStoreNames.contains(\"vehicles\")) {\n                        const vehicleStore = db.createObjectStore(\"vehicles\", {\n                            keyPath: \"id\"\n                        });\n                        vehicleStore.createIndex(\"placa\", \"placa\", {\n                            unique: false\n                        });\n                    }\n                    // Store para tickets de parqueadero\n                    if (!db.objectStoreNames.contains(\"parking_tickets\")) {\n                        const parkingStore = db.createObjectStore(\"parking_tickets\", {\n                            keyPath: \"id\"\n                        });\n                        parkingStore.createIndex(\"placa\", \"placa\", {\n                            unique: false\n                        });\n                        parkingStore.createIndex(\"status\", \"status\", {\n                            unique: false\n                        });\n                        parkingStore.createIndex(\"entryTime\", \"entryTime\", {\n                            unique: false\n                        });\n                    }\n                    // Store para trabajadores\n                    if (!db.objectStoreNames.contains(\"workers\")) {\n                        const workerStore = db.createObjectStore(\"workers\", {\n                            keyPath: \"id\"\n                        });\n                        workerStore.createIndex(\"name\", \"name\", {\n                            unique: false\n                        });\n                        workerStore.createIndex(\"isActive\", \"isActive\", {\n                            unique: false\n                        });\n                    }\n                    // Store para servicios de lavadero\n                    if (!db.objectStoreNames.contains(\"carwash_services\")) {\n                        const serviceStore = db.createObjectStore(\"carwash_services\", {\n                            keyPath: \"id\"\n                        });\n                        serviceStore.createIndex(\"vehicleType\", \"vehicleType\", {\n                            unique: false\n                        });\n                        serviceStore.createIndex(\"isActive\", \"isActive\", {\n                            unique: false\n                        });\n                    }\n                    // Store para transacciones de lavadero\n                    if (!db.objectStoreNames.contains(\"carwash_transactions\")) {\n                        const transactionStore = db.createObjectStore(\"carwash_transactions\", {\n                            keyPath: \"id\"\n                        });\n                        transactionStore.createIndex(\"placa\", \"placa\", {\n                            unique: false\n                        });\n                        transactionStore.createIndex(\"status\", \"status\", {\n                            unique: false\n                        });\n                        transactionStore.createIndex(\"workerId\", \"workerId\", {\n                            unique: false\n                        });\n                        transactionStore.createIndex(\"createdAt\", \"createdAt\", {\n                            unique: false\n                        });\n                    }\n                    // Store para configuración del negocio\n                    if (!db.objectStoreNames.contains(\"business_config\")) {\n                        db.createObjectStore(\"business_config\", {\n                            keyPath: \"id\"\n                        });\n                    }\n                    // Store para historial de vehículos (reportes)\n                    if (!db.objectStoreNames.contains(\"vehicle_history\")) {\n                        const historyStore = db.createObjectStore(\"vehicle_history\", {\n                            keyPath: \"id\"\n                        });\n                        historyStore.createIndex(\"placa\", \"placa\", {\n                            unique: false\n                        });\n                        historyStore.createIndex(\"fecha\", \"fecha\", {\n                            unique: false\n                        });\n                        historyStore.createIndex(\"tipo\", \"tipo\", {\n                            unique: false\n                        });\n                    }\n                }\n            });\n            this.isInitialized = true;\n            console.log(\"✅ LocalDatabase inicializada correctamente\");\n        } catch (error) {\n            console.error(\"❌ Error inicializando LocalDatabase:\", error);\n            throw error;\n        }\n    }\n    // === MÉTODOS PARA VEHÍCULOS ===\n    async saveVehicle(vehicle) {\n        await this.init();\n        await this.db.put(\"vehicles\", vehicle);\n        console.log(\"✅ Veh\\xedculo guardado localmente: \".concat(vehicle.placa));\n    }\n    async getVehicle(vehicleId) {\n        await this.init();\n        return await this.db.get(\"vehicles\", vehicleId) || null;\n    }\n    async getAllVehicles() {\n        await this.init();\n        return await this.db.getAll(\"vehicles\");\n    }\n    async updateVehicle(vehicle) {\n        await this.init();\n        vehicle.updatedAt = new Date();\n        await this.db.put(\"vehicles\", vehicle);\n        console.log(\"✅ Veh\\xedculo actualizado localmente: \".concat(vehicle.placa));\n    }\n    async deleteVehicle(vehicleId) {\n        await this.init();\n        await this.db.delete(\"vehicles\", vehicleId);\n        console.log(\"✅ Veh\\xedculo eliminado localmente: \".concat(vehicleId));\n    }\n    // === MÉTODOS PARA TICKETS DE PARQUEADERO ===\n    async saveParkingTicket(ticket) {\n        await this.init();\n        await this.db.put(\"parking_tickets\", ticket);\n        console.log(\"✅ Ticket de parqueadero guardado localmente: \".concat(ticket.placa));\n    }\n    async getParkingTicket(ticketId) {\n        await this.init();\n        return await this.db.get(\"parking_tickets\", ticketId) || null;\n    }\n    async getParkingTickets(status) {\n        await this.init();\n        if (status) {\n            const tx = this.db.transaction(\"parking_tickets\", \"readonly\");\n            const index = tx.store.index(\"status\");\n            return await index.getAll(status);\n        }\n        return await this.db.getAll(\"parking_tickets\");\n    }\n    async updateParkingTicket(ticket) {\n        await this.init();\n        ticket.updatedAt = new Date();\n        await this.db.put(\"parking_tickets\", ticket);\n        console.log(\"✅ Ticket de parqueadero actualizado localmente: \".concat(ticket.placa));\n    }\n    async completeParkingTicket(ticketId, exitTime) {\n        await this.init();\n        const ticket = await this.getParkingTicket(ticketId);\n        if (!ticket) {\n            throw new Error(\"Ticket no encontrado: \".concat(ticketId));\n        }\n        const exit = exitTime || new Date();\n        const entry = new Date(ticket.entryTime);\n        const totalMinutes = Math.max(1, Math.floor((exit.getTime() - entry.getTime()) / (1000 * 60)));\n        // Calcular el monto total basado en el precio base y tiempo\n        // Si ya tiene totalAmount, usarlo, sino calcular\n        const totalAmount = ticket.totalAmount || ticket.basePrice;\n        const updatedTicket = {\n            ...ticket,\n            exitTime: exit,\n            totalMinutes,\n            totalAmount,\n            status: \"completed\",\n            isPaid: true,\n            updatedAt: new Date()\n        };\n        await this.updateParkingTicket(updatedTicket);\n        console.log(\"✅ Ticket completado localmente: \".concat(ticket.placa, \" - $\").concat(totalAmount));\n        return updatedTicket;\n    }\n    async deleteParkingTicket(ticketId) {\n        await this.init();\n        await this.db.delete(\"parking_tickets\", ticketId);\n        console.log(\"✅ Ticket eliminado localmente: \".concat(ticketId));\n    }\n    // === MÉTODOS PARA TRABAJADORES ===\n    async saveWorker(worker) {\n        await this.init();\n        await this.db.put(\"workers\", worker);\n        console.log(\"✅ Trabajador guardado localmente: \".concat(worker.name));\n    }\n    async getWorker(workerId) {\n        await this.init();\n        return await this.db.get(\"workers\", workerId) || null;\n    }\n    async getAllWorkers() {\n        let activeOnly = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;\n        await this.init();\n        const allWorkers = await this.db.getAll(\"workers\");\n        if (activeOnly) {\n            return allWorkers.filter((worker)=>worker.isActive);\n        }\n        return allWorkers;\n    }\n    async updateWorker(worker) {\n        await this.init();\n        worker.updatedAt = new Date();\n        await this.db.put(\"workers\", worker);\n        console.log(\"✅ Trabajador actualizado localmente: \".concat(worker.name));\n    }\n    async deleteWorker(workerId) {\n        await this.init();\n        await this.db.delete(\"workers\", workerId);\n        console.log(\"✅ Trabajador eliminado localmente: \".concat(workerId));\n    }\n    // === MÉTODOS PARA SERVICIOS DE LAVADERO ===\n    async saveCarwashService(service) {\n        await this.init();\n        await this.db.put(\"carwash_services\", service);\n        console.log(\"✅ Servicio de lavadero guardado localmente: \".concat(service.serviceName));\n    }\n    async getCarwashService(serviceId) {\n        await this.init();\n        return await this.db.get(\"carwash_services\", serviceId) || null;\n    }\n    async getAllCarwashServices() {\n        let activeOnly = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;\n        await this.init();\n        const allServices = await this.db.getAll(\"carwash_services\");\n        if (activeOnly) {\n            return allServices.filter((service)=>service.isActive);\n        }\n        return allServices;\n    }\n    async updateCarwashService(service) {\n        await this.init();\n        service.updatedAt = new Date();\n        await this.db.put(\"carwash_services\", service);\n        console.log(\"✅ Servicio de lavadero actualizado localmente: \".concat(service.serviceName));\n    }\n    async deleteCarwashService(serviceId) {\n        await this.init();\n        await this.db.delete(\"carwash_services\", serviceId);\n        console.log(\"✅ Servicio eliminado localmente: \".concat(serviceId));\n    }\n    // === MÉTODOS PARA TRANSACCIONES DE LAVADERO ===\n    async saveCarwashTransaction(transaction) {\n        await this.init();\n        await this.db.put(\"carwash_transactions\", transaction);\n        console.log(\"✅ Transacci\\xf3n de lavadero guardada localmente: \".concat(transaction.placa));\n    }\n    async getCarwashTransaction(transactionId) {\n        await this.init();\n        return await this.db.get(\"carwash_transactions\", transactionId) || null;\n    }\n    async getAllCarwashTransactions(status) {\n        await this.init();\n        if (status) {\n            const tx = this.db.transaction(\"carwash_transactions\", \"readonly\");\n            const index = tx.store.index(\"status\");\n            return await index.getAll(status);\n        }\n        return await this.db.getAll(\"carwash_transactions\");\n    }\n    async updateCarwashTransaction(transaction) {\n        await this.init();\n        transaction.updatedAt = new Date();\n        await this.db.put(\"carwash_transactions\", transaction);\n        console.log(\"✅ Transacci\\xf3n actualizada localmente: \".concat(transaction.placa));\n    }\n    async deleteCarwashTransaction(transactionId) {\n        await this.init();\n        await this.db.delete(\"carwash_transactions\", transactionId);\n        console.log(\"✅ Transacci\\xf3n eliminada localmente: \".concat(transactionId));\n    }\n    // === MÉTODOS PARA CONFIGURACIÓN DEL NEGOCIO ===\n    async saveBusinessConfig(config) {\n        await this.init();\n        await this.db.put(\"business_config\", config);\n        console.log(\"✅ Configuraci\\xf3n guardada localmente: \".concat(config.businessName));\n    }\n    async getBusinessConfig() {\n        await this.init();\n        const configs = await this.db.getAll(\"business_config\");\n        return configs.length > 0 ? configs[0] : null;\n    }\n    // === MÉTODOS PARA HISTORIAL (REPORTES) ===\n    async saveParkingRecord(record) {\n        await this.init();\n        await this.db.put(\"vehicle_history\", record);\n        console.log(\"✅ Registro de historial guardado localmente: \".concat(record.placa));\n    }\n    async getParkingHistory() {\n        await this.init();\n        return await this.db.getAll(\"vehicle_history\");\n    }\n    // === MÉTODOS DE UTILIDAD ===\n    async clearAllData() {\n        await this.init();\n        const stores = [\n            \"vehicles\",\n            \"parking_tickets\",\n            \"workers\",\n            \"carwash_services\",\n            \"carwash_transactions\",\n            \"business_config\",\n            \"vehicle_history\"\n        ];\n        for (const storeName of stores){\n            await this.db.clear(storeName);\n        }\n        console.log(\"✅ Todos los datos locales han sido eliminados\");\n    }\n    async exportData() {\n        await this.init();\n        const data = {\n            vehicles: await this.db.getAll(\"vehicles\"),\n            parkingTickets: await this.db.getAll(\"parking_tickets\"),\n            workers: await this.db.getAll(\"workers\"),\n            carwashServices: await this.db.getAll(\"carwash_services\"),\n            carwashTransactions: await this.db.getAll(\"carwash_transactions\"),\n            businessConfig: await this.db.getAll(\"business_config\"),\n            vehicleHistory: await this.db.getAll(\"vehicle_history\"),\n            exportDate: new Date().toISOString()\n        };\n        console.log(\"✅ Datos exportados correctamente\");\n        return data;\n    }\n    async importData(data) {\n        await this.init();\n        try {\n            // Limpiar datos existentes\n            await this.clearAllData();\n            // Importar cada tipo de dato\n            if (data.vehicles) {\n                for (const item of data.vehicles){\n                    await this.db.put(\"vehicles\", item);\n                }\n            }\n            if (data.parkingTickets) {\n                for (const item of data.parkingTickets){\n                    await this.db.put(\"parking_tickets\", item);\n                }\n            }\n            if (data.workers) {\n                for (const item of data.workers){\n                    await this.db.put(\"workers\", item);\n                }\n            }\n            if (data.carwashServices) {\n                for (const item of data.carwashServices){\n                    await this.db.put(\"carwash_services\", item);\n                }\n            }\n            if (data.carwashTransactions) {\n                for (const item of data.carwashTransactions){\n                    await this.db.put(\"carwash_transactions\", item);\n                }\n            }\n            if (data.businessConfig) {\n                for (const item of data.businessConfig){\n                    await this.db.put(\"business_config\", item);\n                }\n            }\n            if (data.vehicleHistory) {\n                for (const item of data.vehicleHistory){\n                    await this.db.put(\"vehicle_history\", item);\n                }\n            }\n            console.log(\"✅ Datos importados correctamente\");\n        } catch (error) {\n            console.error(\"❌ Error importando datos:\", error);\n            throw error;\n        }\n    }\n    // === MÉTODOS PARA TIPOS DE VEHÍCULOS ===\n    async saveVehicleType(vehicleType) {\n        await this.init();\n        // Obtener configuración actual o crear una por defecto\n        let config = await this.getBusinessConfig();\n        if (!config) {\n            console.log(\"⚠️ No existe configuraci\\xf3n, creando una por defecto...\");\n            const defaultConfig = {\n                id: \"default-config\",\n                businessName: \"Wilson Cars & Wash\",\n                businessAddress: \"\",\n                businessPhone: \"\",\n                carParkingRate: 2000,\n                motorcycleParkingRate: 1500,\n                truckParkingRate: 3000,\n                carwashEnabled: true,\n                parkingEnabled: true,\n                vehicleTypes: [],\n                ticketData: {\n                    companyName: \"Wilson Cars & Wash\",\n                    companySubtitle: \"Parqueadero y Lavadero\",\n                    nit: \"000000000-0\",\n                    address: \"\",\n                    phone: \"\",\n                    email: \"\",\n                    website: \"\",\n                    footerMessage: \"Gracias por su visita\",\n                    footerInfo: \"Servicio 24/7\"\n                },\n                createdAt: new Date(),\n                updatedAt: new Date()\n            };\n            await this.saveBusinessConfig(defaultConfig);\n            config = defaultConfig;\n        }\n        // Verificar que no exista un tipo con el mismo nombre\n        const existingTypes = config.vehicleTypes || [];\n        const isDuplicate = existingTypes.some((type)=>type.name.toLowerCase() === vehicleType.name.toLowerCase());\n        if (isDuplicate) {\n            throw new Error(\"Ya existe un tipo de veh\\xedculo con este nombre\");\n        }\n        // Agregar el nuevo tipo\n        const updatedConfig = {\n            ...config,\n            vehicleTypes: [\n                ...existingTypes,\n                vehicleType\n            ],\n            updatedAt: new Date()\n        };\n        await this.saveBusinessConfig(updatedConfig);\n        console.log(\"✅ Tipo de veh\\xedculo guardado: \".concat(vehicleType.name));\n    }\n    async getVehicleTypes() {\n        await this.init();\n        const config = await this.getBusinessConfig();\n        return (config === null || config === void 0 ? void 0 : config.vehicleTypes) || [];\n    }\n    async updateVehicleType(vehicleTypeId, updates) {\n        await this.init();\n        const config = await this.getBusinessConfig();\n        if (!config) {\n            throw new Error(\"No se encontr\\xf3 configuraci\\xf3n del negocio\");\n        }\n        const vehicleTypes = config.vehicleTypes || [];\n        const typeIndex = vehicleTypes.findIndex((type)=>type.id === vehicleTypeId);\n        if (typeIndex === -1) {\n            throw new Error(\"Tipo de veh\\xedculo no encontrado\");\n        }\n        // Actualizar el tipo\n        vehicleTypes[typeIndex] = {\n            ...vehicleTypes[typeIndex],\n            ...updates,\n            updatedAt: new Date()\n        };\n        const updatedConfig = {\n            ...config,\n            vehicleTypes,\n            updatedAt: new Date()\n        };\n        await this.saveBusinessConfig(updatedConfig);\n        console.log(\"✅ Tipo de veh\\xedculo actualizado: \".concat(vehicleTypeId));\n    }\n    async deleteVehicleType(vehicleTypeId) {\n        await this.init();\n        const config = await this.getBusinessConfig();\n        if (!config) {\n            throw new Error(\"No se encontr\\xf3 configuraci\\xf3n del negocio\");\n        }\n        const vehicleTypes = config.vehicleTypes || [];\n        const typeToDelete = vehicleTypes.find((type)=>type.id === vehicleTypeId);\n        if (!typeToDelete) {\n            throw new Error(\"Tipo de veh\\xedculo no encontrado\");\n        }\n        // No permitir eliminar tipos predeterminados\n        if (!typeToDelete.isCustom) {\n            throw new Error(\"No se pueden eliminar tipos de veh\\xedculo predeterminados\");\n        }\n        // Filtrar el tipo a eliminar\n        const updatedVehicleTypes = vehicleTypes.filter((type)=>type.id !== vehicleTypeId);\n        const updatedConfig = {\n            ...config,\n            vehicleTypes: updatedVehicleTypes,\n            updatedAt: new Date()\n        };\n        await this.saveBusinessConfig(updatedConfig);\n        console.log(\"✅ Tipo de veh\\xedculo eliminado: \".concat(typeToDelete.name));\n    }\n    constructor(){\n        this.isInitialized = false;\n        this.dbName = \"POSLocalDatabase\";\n        this.version = 1;\n    }\n}\n// Instancia singleton\nconst localDatabase = new LocalDatabase();\n// Función helper para obtener la instancia\nfunction getLocalDB() {\n    return localDatabase;\n}\n// Exportar instancia por defecto\nconst localDB = localDatabase;\n/* harmony default export */ __webpack_exports__[\"default\"] = (localDatabase);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/localDatabase.ts\n"));

/***/ })

});